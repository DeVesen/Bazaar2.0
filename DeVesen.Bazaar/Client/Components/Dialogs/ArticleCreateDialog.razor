@using DeVesen.Bazaar.Client.Components.Common.Buttons
@using DeVesen.Bazaar.Client.Models
@using DeVesen.Bazaar.Client.Services
@using DeVesen.Bazaar.Shared.Services
@using DeVesen.Bazaar.Client.Pages.Article.Components

@inject ArticleService ArticleService
@inject SystemClock SystemClock

<MudDialog>
    <DialogContent>
        @if (_item != null)
        {
            <ArticleMasterDataForm IsValid="@_isValid"
                                   IsValidChanged="@(x => _isValid = x)"
                                   @bind-ArticleItem="_item"/>
        }
        else
        {
            <MudAlert Dense
                      Square
                      Variant="Variant.Filled"
                      Severity="Severity.Normal"
                      ContentAlignment="HorizontalAlignment.Center">
                <MudText>Bereite neuen Artikel vor...</MudText>
            </MudAlert>
        }
    </DialogContent>
    <DialogActions>
        <DvButtonSave Disabled="@(_isValid is false)" OnClick="SubmitAsync" />
        <DvButtonCancel OnClick="Cancel" />
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;

    [Parameter] public bool ForceNext { get; set; }

    [Parameter] public required string VendorId { get; set; }

    private Article? _item;
    private bool _isValid;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        var numberResponse = await ArticleService.GetNextNumber();
        _item = Article.CreateNew(VendorId, numberResponse.Value);
    }

    private async Task SubmitAsync()
    {
        _item!.ApprovedForSale = SystemClock.GetNow();

        await ArticleService.CreateAsync(_item);

        MudDialog.Close(DialogResult.Ok(ForceNext));
    }

    private void Cancel() => MudDialog.Cancel();
}
