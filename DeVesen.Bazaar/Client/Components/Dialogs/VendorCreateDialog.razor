@using DeVesen.Bazaar.Client.Components.Common.Buttons
@using DeVesen.Bazaar.Client.Models
@using DeVesen.Bazaar.Client.Services
@using DeVesen.Bazaar.Client.Validator
@using DeVesen.Bazaar.Client.Pages.Vendor.Components

@inject VendorService VendorService
@inject VendorValidator VendorValidator

<MudDialog>
    <DialogContent>
        <VendorForm @ref="_vendorForm"
                    IsValid="@_isValid"
                    IsTouched="@_isTouched"
                    IsValidChanged="@(x => _isValid = x)"
                    IsTouchedChanged="@(x => _isTouched = x)"
                    @bind-Item="_item"
                    Validation="@(VendorValidator.ValidateAsync)"
                    RequestSave="SubmitAsync"/>
    </DialogContent>
    <DialogActions>
        <DvButtonSave Disabled="@DisableSave" OnClick="SubmitAsync" />
        <DvButtonCancel OnClick="Cancel" />
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;

    [Parameter] public bool ForceNext { get; set; }

    [Parameter] public bool ShowForceNext { get; set; }

    [Parameter] public string StartText { get; set; } = string.Empty;

    private bool DisableSave => (_isValid && _isTouched) is false;

    private VendorForm? _vendorForm;
    private Vendor _item = Vendor.New;
    private bool _preFilled = false;
    private bool _isValid;
    private bool _isTouched;

    protected override void OnParametersSet()
    {
        StartText = StartText.Trim();

        if (string.IsNullOrWhiteSpace(StartText))
        {
            return;
        }

        var lastSpacePos = StartText.LastIndexOf(' ');
        if (lastSpacePos < 0)
        {
            _item.LastName = StartText;
            return;
        }

        _item.FirstName = StartText.Trim()[..lastSpacePos].Trim();
        _item.LastName = StartText.Trim()[lastSpacePos..].Trim();

        _preFilled = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            if (_preFilled && _vendorForm != null)
            {
                await _vendorForm.ValidateForm();
            }
        }
    }

    private async Task SubmitAsync()
    {
        var vendorCreated = await VendorService.CreateAsync(_item);

        if (vendorCreated.IsValid)
        {
            MudDialog.Close(DialogResult.Ok(new OkResult(ForceNext, vendorCreated.Value)));
        }
    }

    private void Cancel() => MudDialog.Cancel();

    public record OkResult(bool ForceNext, Vendor Element);
}
