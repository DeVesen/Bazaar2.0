@using DeVesen.Bazaar.Client.Components.Common.TextField
@using DeVesen.Bazaar.Client.Components.Common.Buttons
@using DeVesen.Bazaar.Client.Services
@using DeVesen.Bazaar.Client.Components.Common

@inject ArticleService ArticleService

<MudDialog>
    <DialogContent>
        <div style="width: 350px" class="d-flex flex-column gap-2">
            <DvTextField T="long?"
                         @ref="_articleNumberRef"
                         @bind-Value="@_articleNumber"
                         FullWidth
                         OnKeyUp="OnArticleNumberKeyUpAsync"
                         Adornment="Adornment.End"
                         AdornmentIcon="@Icons.Material.TwoTone.QrCodeScanner"
                         OnAdornmentClick="OnAdornmentClick" />
            
            @if (_scanIsActive)
            {
                <DeVesScanner OnBarcodeReceived="OnBarcodeReceivedAsync" />
            }
            else @if (_autoRestartCountdown > 0)
            {
                <MudProgressLinear Color="Color.Tertiary" Size="Size.Large" Value="_autoRestartCountdown" Max="@_autoRestartTotalSec" />
            }
            
            @if (string.IsNullOrWhiteSpace(_releaseSeverityText) is false)
            {
                <MudAlert Severity="@_releaseSeverityStatus"
                          Variant="@_releaseVariant">@_releaseSeverityText</MudAlert>
            }
        </div>
    </DialogContent>
    <DialogActions>
        <DvButtonClose OnClick="OnCloseAsync" />
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;

    [Parameter] public required string VendorId { get; set; }

    private DvTextField<long?>? _articleNumberRef;
    private long? _articleNumber;
    private Severity _releaseSeverityStatus = Severity.Normal;
    private Variant _releaseVariant = Variant.Text;
    private bool _scanIsActive;
    private string _releaseSeverityText = "Bitte Artickelnummer eingeben ...";

    private const int _autoRestartTotalSec = 3;
    private int _autoRestartCountdown = 0;

    private void OnCloseAsync() => MudDialog.Close();

    private void SetReleaseSuccess(string text)
    {
        _releaseSeverityStatus = Severity.Success;
        _releaseVariant = Variant.Filled;
        _releaseSeverityText = text;
    }

    private void SetReleaseError(string text)
    {
        _releaseSeverityStatus = Severity.Error;
        _releaseVariant = Variant.Filled;
        _releaseSeverityText = text;
    }

    private async Task OnArticleNumberKeyUpAsync(KeyboardEventArgs obj)
    {
        if (obj.Key == "Enter")
        {
            if (_articleNumber.HasValue)
            {
                await ApproveArticleAsync(_articleNumber.Value);
            }

            await SelectArticleNumberInput();
        }
    }

    private async Task ApproveArticleAsync(long articleNumber)
    {
        var result = await ArticleService.ApproveAsync(articleNumber, VendorId);

        if (result.IsValid)
        {
            SetReleaseSuccess($"Artikel {articleNumber} erfolgreich freigegeben!");
        }
        else
        {
            SetReleaseError(result.ErrorMessage);
        }
    }

    private async Task SelectArticleNumberInput()
    {
        if (_articleNumberRef == null)
        {
            return;
        }

        await _articleNumberRef.FocusAsync();
        await _articleNumberRef.SelectAsync();
    }

    private void OnAdornmentClick()
    {
        _scanIsActive = !_scanIsActive;

        if (_scanIsActive is false)
        {
            return;
        }

        ResetInput();

        _releaseSeverityStatus = Severity.Success;
        _releaseVariant = Variant.Filled;
        _releaseSeverityText = string.Empty;
    }

    private void RestartScanner()
    {
        const int tickPerSec = 2;
        const int intervalMs = 1000 / tickPerSec;
        const int counter = _autoRestartTotalSec * tickPerSec;
        
        Task.Run(async () =>
        {
            _autoRestartCountdown = _autoRestartTotalSec;
            StateHasChanged();

            for (var index = 0; index < counter; index++)
            {
                await Task.Delay(intervalMs);

                _autoRestartCountdown = (counter - index) / tickPerSec;

                StateHasChanged();
            }

            ResetInput();

            _scanIsActive = true;
            _autoRestartCountdown = 0;

            StateHasChanged();
            
        });
    }

    private void ResetInput()
    {
        _articleNumber = null;
    }

    private async Task OnBarcodeReceivedAsync(string obj)
    {
        _scanIsActive = false;

        if (long.TryParse(obj, out var value))
        {
            _articleNumber = value;
            await ApproveArticleAsync(value);
        }
        else
        {
            SetReleaseError($"'{obj}' ist kein erlaubter Wert!");
        }
        
        RestartScanner();
    }

}
