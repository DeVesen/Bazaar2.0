@using DeVesen.Bazaar.Client.Extensions
@using DeVesen.Bazaar.Shared.Events

@implements IAsyncDisposable;

@inject ArticleHubConnectionService ArticleHub;

@code {

    private IDisposable _addedActionHandle = null!;
    private IDisposable _updatedActionHandle = null!;
    private IDisposable _removedActionHandle = null!;
    private IDisposable _statusChangedActionHandle = null!;

    [Parameter]
    public EventCallback<ArticleAddedArgs> Added { get; set; }

    [Parameter]
    public EventCallback<ArticleUpdatedArgs> Updated { get; set; }

    [Parameter]
    public EventCallback<ArticleRemovedArgs> Removed { get; set; }

    [Parameter]
    public EventCallback<ArticleStatusChangedInfo> StatusChanged { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await ArticleHub.StartAsync();
        
        _addedActionHandle = ArticleHub.RegisterOnAdded(OnAdded);
        _updatedActionHandle = ArticleHub.RegisterOnUpdated(OnUpdated);
        _removedActionHandle = ArticleHub.RegisterOnRemoved(OnRemoved);
        _statusChangedActionHandle = ArticleHub.RegisterOnStatusChanged(OnStatusChanged);
    }

    private void OnAdded(ArticleAddedArgs args)
    {
        Added.InvokeAsync(args);
    }

    private void OnUpdated(ArticleUpdatedArgs args)
    {
        Updated.InvokeAsync(args);
    }

    private void OnRemoved(ArticleRemovedArgs args)
    {
        Removed.InvokeAsync(args);
    }

    private void OnStatusChanged(ArticleStatusChangedInfo args)
    {
        StatusChanged.InvokeAsync(args);
    }

    public async ValueTask DisposeAsync()
    {
        // _addedActionHandle.Dispose();
        // _updatedActionHandle.Dispose();
        // _removedActionHandle.Dispose();
        // _statusChangedActionHandle.Dispose();

        await ArticleHub.StopAsync();
    }

}