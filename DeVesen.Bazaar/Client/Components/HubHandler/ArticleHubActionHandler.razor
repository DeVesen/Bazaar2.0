@using DeVesen.Bazaar.Client.Extensions
@using DeVesen.Bazaar.Shared.Events

@implements IAsyncDisposable;

@inject ArticleHubConnectionService ArticleHub;

@code {

    private IDisposable _addedActionHandle = null!;
    private IDisposable _updatedActionHandle = null!;
    private IDisposable _removedActionHandle = null!;
    private IDisposable _statusChangedActionHandle = null!;

    [Parameter]
    public EventCallback<ArticleAddedArgs> Added { get; set; }

    [Parameter]
    public EventCallback<ArticleUpdatedArgs> Updated { get; set; }

    [Parameter]
    public EventCallback<ArticleRemovedArgs> Removed { get; set; }

    [Parameter]
    public EventCallback<ArticleStatusChangedArgs> StatusChanged { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await ArticleHub.StartAsync();
        
        _addedActionHandle = ArticleHub.RegisterOnAdded(OnAdded);
        _updatedActionHandle = ArticleHub.RegisterOnUpdated(OnUpdated);
        _removedActionHandle = ArticleHub.RegisterOnRemoved(OnRemoved);
        _statusChangedActionHandle = ArticleHub.RegisterOnStatusChanged(OnStatusChanged);
    }

    private void OnAdded(IEnumerable<ArticleAddedArgs> args)
    {
        foreach (var arg in args)
        {
            Added.InvokeAsync(arg);
        }
    }

    private void OnUpdated(IEnumerable<ArticleUpdatedArgs> args)
    {
        foreach (var arg in args)
        {
            Updated.InvokeAsync(arg);
        }
    }

    private void OnRemoved(IEnumerable<ArticleRemovedArgs> args)
    {
        foreach (var arg in args)
        {
            Removed.InvokeAsync(arg);
        }
    }

    private void OnStatusChanged(IEnumerable<ArticleStatusChangedArgs> args)
    {
        foreach (var arg in args)
        {
            StatusChanged.InvokeAsync(arg);
        }
    }

    public async ValueTask DisposeAsync()
    {
        await ArticleHub.StopAsync();
    }

}