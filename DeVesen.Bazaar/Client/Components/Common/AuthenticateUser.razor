@using DeVesen.Bazaar.Client.Services
@using DeVesen.Bazaar.Shared

@inject HttpClient Http
@inject IJSRuntime JsRuntime
@inject TokenAuthenticationStateProvider AuthenticationStateProvider

<MudCard Class="p-3 pt-5">
    @if (_hasAuth)
    {
        <MudButton Variant="Variant.Filled"
                   Color="Color.Dark"
                   Size="Size.Small"
                   OnClick="DisconnectUserAsync">Abmelden</MudButton>
    }
    else
    {
        <MudTextField T="string"
                      FullWidth
                      ShrinkLabel
                      Label="Benutzername"
                      Margin="Margin.Dense"
                      OnKeyUp="OnKeyUpAsync"
                      @bind-Value="@_loginModel.Username"/>

        <MudTextField T="string"
                      FullWidth
                      ShrinkLabel
                      Label="Passwort"
                      Margin="Margin.Dense"
                      InputType="@_passwordInput"
                      Adornment="Adornment.End"
                      AdornmentIcon="@_passwordInputIcon"
                      OnAdornmentClick="OnPasswordToggle"
                      AdornmentAriaLabel="Show Password"
                      OnKeyUp="OnKeyUpAsync"
                      @bind-Value="@_loginModel.Password" />

        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   Class="mt-3"
                   OnClick="SubmitAsync">Login</MudButton>

        @if (string.IsNullOrWhiteSpace(_authFailedMessage) is false)
        {
            <MudAlert Variant="Variant.Filled"
                      Severity="Severity.Error">@_authFailedMessage</MudAlert>
        }
    }
</MudCard>

@code {
    private LoginModel _loginModel = new();

    private bool _isPasswordShow = false;
    private InputType _passwordInput = InputType.Password;
    private string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
    private bool _hasAuth = false;
    private string _authFailedMessage = string.Empty;

    private bool MinimumInputGiven => string.IsNullOrWhiteSpace(_loginModel.Username) is false &&
                                      string.IsNullOrWhiteSpace(_loginModel.Password) is false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        await VerityAuthenticatedAsync();
    }

    private async Task SubmitAsync()
    {
        _authFailedMessage = string.Empty;

        if (MinimumInputGiven is false)
        {
            return;
        }

        var result = await Http.PostAsJsonAsync("api/v1/Authentication/login", _loginModel);

        if (result.IsSuccessStatusCode)
        {
            var token = await result.Content.ReadAsStringAsync();
            await JsRuntime.InvokeVoidAsync("localStorage.setItem", "authToken", token);
            AuthenticationStateProvider.MarkUserAsAuthenticated(token);
        }
        else
        {
            _authFailedMessage = "Benutzername oder Passwort sind nicht korrekt!";
        }

        await VerityAuthenticatedAsync();
    }

    private async Task DisconnectUserAsync(MouseEventArgs arg)
    {
        await JsRuntime.InvokeVoidAsync("localStorage.removeItem", "authToken");
        AuthenticationStateProvider.MarkUserAsLoggedOut();

        await VerityAuthenticatedAsync();
    }

    private async Task VerityAuthenticatedAsync()
    {
        var newState = await AuthenticationStateProvider.HasAuthenticationAsync();

        if (_hasAuth == newState)
        {
            return;
        }

        _hasAuth = newState;
        StateHasChanged();
    }

    private void OnPasswordToggle()
    {
        @if (_isPasswordShow)
        {
            _isPasswordShow = false;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            _passwordInput = InputType.Password;
        }
        else
        {
            _isPasswordShow = true;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
            _passwordInput = InputType.Text;
        }
    }

    private async Task OnKeyUpAsync(KeyboardEventArgs args)
    {
        if (args.Key != "Enter")
        {
            return;
        }

        await SubmitAsync();
    }
}
