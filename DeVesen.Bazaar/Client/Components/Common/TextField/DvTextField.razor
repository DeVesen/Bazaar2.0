@typeparam T

@inherits MudTextField<T>

<div style="@OuterStyle" class="@OuterClass">
    <CascadingValue Value="false" Name="SubscribeToParentForm" IsFixed>
        <MudTextField @ref="_textField"
                      T="T"
                      ShrinkLabel="@ShrinkLabel"
                      Margin="@Margin"
                      Variant="@Variant"
                      Label="@Label"
                      AutoFocus="@AutoFocus"
                      Placeholder="@Placeholder"
                      DebounceInterval="@DebounceInterval"
                      Value="@Value"
                      ReadOnly="@ReadOnly"
                      Disabled="@Disabled"
                      Required="@Required"
                      RequiredError="@RequiredError"
                      Underline="@Underline"
                      AutoGrow="@AutoGrow"
                      Class="@Class"
                      Clearable="@Clearable"
                      ClearIcon="@ClearIcon"
                      Converter="@Converter"
                      Counter="@Counter"
                      Culture="@Culture"
                      Format="@Format"
                      FullWidth="@FullWidth"
                      HelperId="@HelperId"
                      HelperText="@HelperText"
                      HelperTextOnFocus="@HelperTextOnFocus"
                      Immediate="@Immediate"
                      InputId="@InputId"
                      InputMode="@InputMode"
                      InputType="@InputType"
                      Lines="@Lines"
                      Mask="@Mask"
                      MaxLength="@MaxLength"
                      MaxLines="@MaxLines"
                      Style="@Style"
                      OnAdornmentClick="@OnAdornmentClick"
                      Error="@Error"
                      ErrorId="@ErrorId"
                      ErrorText="@ErrorText"
                      Adornment="@Adornment"
                      AdornmentColor="@AdornmentColor"
                      AdornmentText="@AdornmentText"
                      AdornmentIcon="@AdornmentIcon"
                      AdornmentAriaLabel="@AdornmentAriaLabel"
                      Validation="@Validation"
                      IconSize="@IconSize"
                      OnClearButtonClick="@OnClearButtonClick"
                      OnDebounceIntervalElapsed="@OnDebounceIntervalElapsed"
                      OnInternalInputChanged="@OnInternalInputChanged"
                      OnlyValidateIfDirty="@OnlyValidateIfDirty"
                      Pattern="@Pattern"
                      Tag="@Tag"
                      Text="@Text"
                      TextUpdateSuppression="@TextUpdateSuppression"
                      Typo="@Typo"
                      UserAttributes="@UserAttributes"
                      ValueChanged="OnValueChanged"
                      TextChanged="OnTextChanged"
                      OnKeyDown="InvokeKeyDownAsync"
                      OnKeyUp="InvokeKeyUpAsync"
                      OnBlur="OnBlurredAsync" />
    </CascadingValue>
</div>

@code {
    [Parameter]
    public string? OuterStyle { get; set; }

    [Parameter]
    public string? OuterClass { get; set; }

    private MudTextField<T> _textField = null!;

    private async Task OnTextChanged(string newText)
    {
        await SetTextAsync(newText);
    }

    private async Task OnValueChanged(T newValue)
    {
        await SetValueAsync(newValue, true, true);
    }

    public void ReRender()
    {
        ForceRender(true);
    }
    
    public new Task Clear()
    {
        return _textField.Clear();
    }

    /// <inheritdoc />
    public override ValueTask FocusAsync()
    {
        return _textField.FocusAsync();
    }

    /// <inheritdoc />
    public override ValueTask BlurAsync()
    {
        return _textField.BlurAsync();
    }

    /// <inheritdoc />
    public override ValueTask SelectAsync()
    {
        return _textField.SelectAsync();
    }

    /// <inheritdoc />
    public override ValueTask SelectRangeAsync(int pos1, int pos2)
    {
        return _textField.SelectRangeAsync(pos1, pos2);
    }
}
