@using DeVesen.Bazaar.Client.Extensions
@using DeVesen.Bazaar.Client.Models
@using DeVesen.Bazaar.Client.Pages.ArticleCategory.Components
@using DeVesen.Bazaar.Client.State
@using DeVesen.Bazaar.Client.State.ArticleCategory
@using DeVesen.Bazaar.Client.State.Title
@using Fluxor

@page "/article-category"

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@inject TitleFacade TitleFacade
@inject StateFacade StateFacade
@inject IState<ArticleCategoryState> ArticleCategoryState
@inject IDialogService DialogService

<ArticleCategoryOverviewToolbar @bind-SearchText="@_searchText"
                                @bind-SearchText:after="@ReloadElements"
                                OnCreateBtnClick="@CreateArticleCategoryAsync" />

<MudTable T="ArticleCategory"
          FixedHeader
          Hover
          Items="@ArticleCategoryState.Value.Items"
          SortLabel="Sort By"
          OnRowClick="OnTableRowClickedAsync">
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<ArticleCategory, object>(x => x.Name)">Bezeichnung</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Bezeichnung">@context.Name</MudTd>
    </RowTemplate>
</MudTable>

@code {

    private string? _searchText;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        TitleFacade.SetCaption("Kategorien");
    }

    private async Task CreateArticleCategoryAsync()
    {
        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            BackdropClick = false
        };

        var forceNext = false;

        do
        {
            var parameters = new DialogParameters<ArticleCategoryCreateDialog> { { x => x.ForceNext, forceNext } };

            var dlg = await DialogService.ShowAsync<ArticleCategoryCreateDialog>("Artikel-Kategorie anlegen", parameters, options);
            var result = await dlg.Result;

            forceNext = result!.Canceled is false && (bool)result.Data!;
        } while (forceNext);
        
        ReloadElements();
    }

    private void ReloadElements()
    {
        StateFacade.ArticleCategory.Fetch();
        StateHasChanged();
    }

    private async Task OnTableRowClickedAsync(TableRowClickEventArgs<ArticleCategory> args)
    {
        var parameters = new DialogParameters<ArticleCategoryEditDialog> { { x => x.Item, args.Item } };

        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            BackdropClick = false
        };

        await DialogService.ShowAsync<ArticleCategoryEditDialog>("Artikel-Kategorie ändern", parameters, options)
                           .WaitForResult();

        ReloadElements();
    }
}
