@using DeVesen.Bazaar.Client.Models
@using DeVesen.Bazaar.Client.Services
@using DeVesen.Bazaar.Client.State.SalesCart
@using DeVesen.Bazaar.Client.Pages.Sales.Components
@using DeVesen.Bazaar.Client.State.Title
@using DeVesen.Bazaar.Client.Components.Common
@using DeVesen.Bazaar.Client.Components.HubHandler
@using DeVesen.Bazaar.Shared.Events

@page "/Sales"
@attribute [Authorize]

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@inject TitleFacade TitleFacade;
@inject ArticleService ArticleService;
@inject SalesCartFacade SalesCartFacade;
@inject IState<SalesCartState> SalesCartState;

<style>
    @@media (max-width: 576px) {
        .ptsm {
            padding-top: 0.5rem;
            width: 100%;
            display: flex;
            justify-content: center;
        }
    }
</style>

<ArticleHubActionHandler Updated="OnArticleUpdated" Removed="OnArticleRemoved" StatusChanged="OnStatusChanged" />

<div class="d-flex flex-column gap-4 px-1">
    @if (CriticalWarnings.Any())
    {
        <MudAlert Variant="Variant.Filled"
                  Severity="Severity.Error"
                  ContentAlignment="HorizontalAlignment.Center">
            <MudText Typo="Typo.h5">Einer Ihrer Artikel wurde verändert, bitte Warenkorb neu anlegen!</MudText>
            @foreach(var warningItem in CriticalWarnings)
            {
                <div class="d-flex">
                    <MudText Style="width: 200px;">@warningItem.ArticleNumber</MudText>
                    <MudText>@warningItem.Reason</MudText>
                </div>
            }
        </MudAlert>

        <MudButton Color="Color.Error" OnClick="@SalesCartFacade.ClearCart">Neu anlegen</MudButton>
    }
    else
    {
        <MudGrid>
            <MudItem xs="12" md="6">

                <MudPaper Class="d-flex flex-column justify-center gap-4">
                    <div class="d-sm-flex justify-start gap-4">
                        <MudTextField @ref="_articleNumberRef"
                                      T="long?"
                                      FullWidth="true"
                                      Label="Nummer"
                                      InputMode="InputMode.numeric"
                                      Margin="Margin.None"
                                      DebounceInterval="0"
                                      Style="min-width: 160px"
                                      Adornment="Adornment.End"
                                      AdornmentIcon="@Icons.Material.TwoTone.QrCodeScanner"
                                      @bind-Value="_articleNumber"
                                      @bind-Value:after="@OnArticleSearchAsync"
                                      OnKeyUp="@OnArticleSearchKeyUpAsync"
                                      OnAdornmentClick="OnAdornmentClick" />

                        <MudTooltip Text="Eingabe bestätigen" Disabled="@(_articleNumber.HasValue is false)">
                            <MudIconButton Icon="@BazaarIcons.Enter" Disabled="@(_articleNumber.HasValue is false)" />
                        </MudTooltip>

                        <MudButtonGroup OverrideStyles="false" Class="ptsm">
                            <SalesPriceBtn Value="@_article?.Price01"
                                           Color="Color.Primary"
                                           Disabled="@(ArticleValidForSale is false)"
                                           OnClick="() => OnArticlePriceClickAsync(_article!, _article!.Price01)"/>
                            <SalesPriceBtn Value="@_article?.Price02"
                                           Color="Color.Secondary"
                                           Disabled="@(ArticleValidForSale is false)"
                                           OnClick="() => OnArticlePriceClickAsync(_article!, _article!.Price02!.Value)" />
                        </MudButtonGroup>
                    </div>

                    @if (_scanIsActive)
                    {
                        <DeVesScanner OnBarcodeReceived="OnBarcodeReceivedAsync" />
                    }

                    @if (string.IsNullOrWhiteSpace(_articleAlertText) is false)
                    {
                        <MudAlert Dense
                                  Square
                                  NoIcon="@_articleAlertNoIcon"
                                  Variant="@_articleAlertVariant"
                                  Severity="@_articleAlertSeverity"
                                  ContentAlignment="HorizontalAlignment.Center">@_articleAlertText</MudAlert>


                        @if (_article != null)
                        {
                            <div class="d-flex flex-column gap-2">
                                <div class="d-flex gap-2">
                                    <MudField Label="Kategorie"
                                              Margin="Margin.Dense">@_article.ArticleCategory</MudField>
                                    <MudField Label="Hersteller"
                                              Margin="Margin.Dense">@_article.Manufacturer</MudField>
                                </div>
                                <MudField Label="Beschreibung"
                                          Margin="Margin.Dense">@_article.Description</MudField>
                            </div>
                        }
                    }
                </MudPaper>
            </MudItem>

            @if (HasItemsInCart)
            {
                <MudItem xs="12" md="6">
                    <MudGrid Spacing="2">
                        <MudItem xs="12">
                            <MudStack>
                                @foreach (var item in ItemsInCart)
                                {
                                    <ArticleInCartItem Item="item" OnRemoveClick="x => SalesCartFacade.RemoveItemFromCart(x)"/>
                                }
                            </MudStack>
                        </MudItem>
                        <MudItem xs="4">
                            <MudField Label="Summe" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.TwoTone.Euro" Variant="Variant.Filled">@ValueOfGoods</MudField>
                        </MudItem>
                        <MudSpacer/>
                        <MudItem xs="4" Class="d-flex justify-end gap-2">
                            <MudTooltip Text="Warenkorb leeren" Disabled="@(HasItemsInCart is false)">
                                <MudIconButton Disabled="@(HasItemsInCart is false)"
                                               Icon="@Icons.Material.TwoTone.Delete"
                                               Variant="Variant.Filled"
                                               Color="Color.Primary"
                                               Size="Size.Large"
                                               OnClick="@OnClearCartClicked"
                                               Class="p-3"/>
                            </MudTooltip>
                            <MudTooltip Text="Verkauf abschließen" Disabled="@(HasItemsInCart is false)">
                                <MudIconButton Disabled="@(HasItemsInCart is false)"
                                               Icon="@Icons.Material.TwoTone.Euro"
                                               Variant="Variant.Filled"
                                               Color="Color.Primary"
                                               Size="Size.Large"
                                               OnClick="@OnCompleteSaleClicked"
                                               Class="p-3"/>
                            </MudTooltip>
                        </MudItem>
                    </MudGrid>
                </MudItem>
            }
        </MudGrid>
    }
</div>

<DispatchedAction Callback="DispatchedActionCallback" />

@code {
    [Inject] private IDialogService DialogService { get; set; } = null!;

    private bool ArticleValidForSale => _article != null &&
                                        _article.IsValidForSale() &&
                                        ArticleAlreadyInCart(_article.Number) is false;

    private bool HasItemsInCart => ItemsInCart.Any();
    private IEnumerable<PurchaseItem> ItemsInCart => SalesCartState.Value.PurchaseItems.OrderBy(p => p.ArticleNumber);
    private double ValueOfGoods => ItemsInCart.Sum(p => p.SalesAmount);

    private IEnumerable<CriticalWarning> CriticalWarnings => SalesCartState.Value.CriticalWarnings;

    private MudTextField<long?>? _articleNumberRef;

    private long? _articleNumber;
    private bool _scanIsActive;
    private Article? _article;
    private bool _articleAlertNoIcon = true;
    private Severity _articleAlertSeverity = Severity.Normal;
    private Variant _articleAlertVariant = Variant.Text;
    private string _articleAlertText = "Bitte Artikelnummer eingeben ...";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        TitleFacade.SetCaption("Verkauf");

        SalesCartFacade.ClearCart();
    }

    protected override ValueTask DisposeAsyncCore(bool disposing)
    {
        SalesCartFacade.ClearCart();
        return base.DisposeAsyncCore(disposing);
    }

    private async Task OnArticleSearchKeyUpAsync(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            await OnArticleSearchAsync();

            await SelectArticleNumberInput();
        }
    }

    private async Task OnArticleSearchAsync()
    {
        if (_articleNumber.HasValue is false)
        {
            _article = null;
            return;
        }

        _article = (await ArticleService.GetByNumber(_articleNumber.Value)).Value;

        if (_article == null)
        {
            ShowErrorArticleSelectionMessage($"Artikel {_articleNumber} nicht gefunden!");

            await SelectArticleNumberInput();
        }
        else if (ArticleAlreadyInCart(_articleNumber.Value))
        {
            ShowNeutralArticleSelectionMessage($"Artikel {_articleNumber} bereits im Warenkorb!");

            await SelectArticleNumberInput();
        }
        else
        {
            switch (_article.Status)
            {
                case Article.StatusType.None:
                    ShowErrorArticleSelectionMessage($"Artikel {_articleNumber} nicht für den Verkauf frei gegeben!");
                    break;
                case Article.StatusType.Approved:
                    ShowSuccessArticleSelectionMessage($"Artikel {_articleNumber} bereit, bitte Preis wählen...", Variant.Filled);
                    break;
                case Article.StatusType.Sold:
                    ShowErrorArticleSelectionMessage($"Artikel {_articleNumber} ist bereits verkauft!");
                    break;
                case Article.StatusType.Returned:
                    ShowErrorArticleSelectionMessage($"Artikel {_articleNumber} ist bereits zurückgegeben!");
                    break;
                case Article.StatusType.Settled:
                    ShowErrorArticleSelectionMessage($"Artikel {_articleNumber} ist bereits abgerechnet!");
                    break;
                default:
                    throw new ArgumentOutOfRangeException();
            }

            await SelectArticleNumberInput();
        }
    }

    public async Task OnArticlePriceClickAsync(Article article, double price)
    {
        await Task.CompletedTask;

        SalesCartFacade.RequestItemToCart(article, price);

        await SelectArticleNumberInput();
    }

    private async Task DispatchedActionCallback(object action)
    {
        if (action is SalesCartActions.AddItemToCart or SalesCartActions.ClearCart or SalesCartActions.RemoveItemFromCart or SalesCartActions.BookSaleCompleted)
        {
            if (action is SalesCartActions.AddItemToCart toCart)
            {
                ShowSuccessArticleSelectionMessage($"Artikel {toCart.ArticleNumber} mit {toCart.SalesAmount} € aufgenommen.", Variant.Filled);
            }

            _articleNumber = null;
            _article = null;

            await SelectArticleNumberInput();
        }

        if (action is SalesCartActions.AddItemToCartFailed failedInfo)
        {
            ShowErrorArticleSelectionMessage(failedInfo.Message);

            await SelectArticleNumberInput();
        }
    }

    private bool ArticleAlreadyInCart(long number)
        => SalesCartState.Value.PurchaseItems.Any(p => p.ArticleNumber == number);

    private void ShowSuccessArticleSelectionMessage(string message, Variant variant)
    {
        _articleAlertSeverity = Severity.Success;
        _articleAlertVariant = variant;
        _articleAlertText = message;
        _articleAlertNoIcon = variant != Variant.Filled;
    }

    private void ShowErrorArticleSelectionMessage(string message)
    {
        _articleAlertSeverity = Severity.Error;
        _articleAlertVariant = Variant.Filled;
        _articleAlertText = message;
        _articleAlertNoIcon = false;
    }

    private void ShowNeutralArticleSelectionMessage(string message)
    {
        _articleAlertSeverity = Severity.Error;
        _articleAlertVariant = Variant.Filled;
        _articleAlertText = message;
        _articleAlertNoIcon = false;
    }

    private async Task SelectArticleNumberInput()
    {
        if (_articleNumberRef == null)
        {
            return;
        }

        await _articleNumberRef.FocusAsync();
        await _articleNumberRef.SelectAsync();
    }


    private async Task OnClearCartClicked()
    {
        var msgOptions = new DialogOptions
        {
            BackdropClick = true,
            CloseOnEscapeKey = true,
            Position = DialogPosition.Center
        };
        var result = await DialogService.ShowMessageBox("ACHTUNG",
                                                        "Einkaufsliste wirklich verwerfen?",
                                                        yesText: "Löschen", cancelText: "Abbruch",
                                                        options: msgOptions);

        if (result.HasValue && result.Value)
        {
            SalesCartFacade.ClearCart();
        }

        _articleNumber = null;
        _article = null;

        await SelectArticleNumberInput();
    }

    private async Task OnCompleteSaleClicked()
    {
        var msgOptions = new DialogOptions
        {
            BackdropClick = true,
            CloseOnEscapeKey = true,
            Position = DialogPosition.Center
        };
        var result = await DialogService.ShowMessageBox("Verkauf abschließen",
                                                        $"Den Verkauf von {ItemsInCart.Count()} Artikel für {ValueOfGoods} € abschließen?",
                                                        yesText: "Buchen", cancelText: "Abbruch",
                                                        options: msgOptions);

        if (result.HasValue && result.Value)
        {
            SalesCartFacade.CompleteSale();
        }

        _articleNumber = null;
        _article = null;

        await SelectArticleNumberInput();
    }


    private void OnArticleUpdated(ArticleUpdatedArgs args)
    {
        if (SalesCartState.Value.PurchaseItems.Any(p => p.ArticleNumber == args.ArticleNumber))
        {
            SalesCartFacade.AddCriticalWarning(args.ArticleNumber, "Artikel wurde verändert!");
        }
    }

    private void OnArticleRemoved(ArticleRemovedArgs args)
    {
        if (SalesCartState.Value.PurchaseItems.Any(p => p.ArticleNumber == args.ArticleNumber))
        {
            SalesCartFacade.AddCriticalWarning(args.ArticleNumber, "Artikel wurde gelöscht!");
        }
    }

    private void OnStatusChanged(ArticleStatusChangedInfo args)
    {
        if (SalesCartState.Value.PurchaseItems.Any(p => p.ArticleNumber == args.ArticleNumber))
        {
            var procedure = args.Field switch
            {
                ArticleStatusChangedInfo.ChangedField.Approved => "Freigegeben",
                ArticleStatusChangedInfo.ChangedField.Sold => "Verkauft",
                ArticleStatusChangedInfo.ChangedField.Returned => "Zurückgegeben",
                ArticleStatusChangedInfo.ChangedField.Settled => "Abgerechnet",
                _ => string.Empty
            };

            SalesCartFacade.AddCriticalWarning(args.ArticleNumber, $"Artikel wurde verändert: {procedure}");
        }
    }

    private void OnAdornmentClick()
    {
        _scanIsActive = !_scanIsActive;

        if (_scanIsActive)
        {
            _articleNumber = null;

            _articleAlertNoIcon = true;
            _articleAlertSeverity = Severity.Success;
            _articleAlertVariant = Variant.Filled;
            _articleAlertText = string.Empty;
        }
    }

    private async Task OnBarcodeReceivedAsync(string obj)
    {
        _scanIsActive = false;

        if (long.TryParse(obj, out var value))
        {
            _articleNumber = value;
            await OnArticleSearchAsync();
        }
        else
        {
            ShowErrorArticleSelectionMessage($"'{obj}' ist kein erlaubter Wert!");
        }
    }

}
