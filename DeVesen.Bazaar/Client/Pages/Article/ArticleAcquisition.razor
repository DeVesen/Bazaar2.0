@using DeVesen.Bazaar.Client.Models
@using DeVesen.Bazaar.Client.Pages.Article.Components
@using DeVesen.Bazaar.Client.Services
@using DeVesen.Bazaar.Client.State.Article
@using DeVesen.Bazaar.Client.State.Title
@using DeVesen.Bazaar.Client.Components.Common.Buttons

@page "/acquisition/{vendorId}"

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@inject TitleFacade TitleFacade
@inject ArticleFacade ArticleFacade
@inject VendorService VendorService
@inject IState<ArticleState> ArticleState

@inject Services.DialogService DialogService;

@if (_vendor != null)
{
    <div class="d-flex flex-column gap-4 px-1 h-100">

        <ArticleOverviewToolbar @bind-Vendor="@_vendor"
                                @bind-Number="@_number"
                                @bind-SearchText="@_searchText"
                                @bind-Vendor:after="@OnArticleFilterChange"
                                @bind-Number:after="@OnArticleFilterChange"
                                @bind-SearchText:after="@OnArticleFilterChange"
                                DisableVendorSelection="@(string.IsNullOrWhiteSpace(VendorId) is false)"
                                ShowVendorSelection="false">
            <MudGrid Spacing="1">
                <MudItem xs="6" md="12" lg="6">
                    <DvButtonNeu Disabled="@(_vendor == null)"
                                 OnClick="CreateArticleAsync" />
                </MudItem>
                <MudItem xs="6" md="12" lg="6">
                    <DvButtonImport Disabled="@(_vendor == null)"
                                    OnClick="ImportArticleAsync" />
                </MudItem>
            </MudGrid>
        </ArticleOverviewToolbar>

        <MudTable T="Article"
                  FixedHeader
                  Hover
                  Loading="@(ArticleState.Value.IsLoaded is false)"
                  Items="@ArticleState.Value.Items"
                  SortLabel="Sort By"
                  OnRowClick="x => ModifyArticleAsync(x.Item!)">
            <HeaderContent>
                <MudTh><MudTableSortLabel SortBy="new Func<Article, object>(x => x.Number)">Nummer</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Article, object>(x => x.ArticleCategory)">Kategorie</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Article, object>(x => x.Manufacturer)">Hersteller</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Article, object>(x => x.Description)">Beschreibung</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Article, object>(x => x.Price01)">Preis</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Article, object>(x => x.Status)">Status</MudTableSortLabel></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Nummer">@context.Number</MudTd>
                <MudTd DataLabel="Kategorie">@context.ArticleCategory</MudTd>
                <MudTd DataLabel="Hersteller">@context.Manufacturer</MudTd>
                <MudTd DataLabel="Beschreibung">@context.Description</MudTd>
                <MudTd DataLabel="Preis">@context.Price01</MudTd>
                <MudTd DataLabel="Status">@context.StatusText</MudTd>
            </RowTemplate>
        </MudTable>
    </div>
}
else
{
    <MudAlert Severity="Severity.Error"><MudText>Händler wurde nicht gefunden, bitte wenden Sie sich an den Verein für den korrekten Link.</MudText></MudAlert>
}

@code {

    [Parameter]
    public string VendorId { get; set; } = string.Empty;

    private Vendor? _vendor;
    private string? _number;
    private string? _searchText;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var vendorResult = await VendorService.GetByIdAsync(VendorId);
        _vendor = vendorResult.IsValid ? vendorResult.Value.Item : null;

        FetchArticleList();

        SetPageCaption();
    }

    private void OnArticleFilterChange()
    {
        FetchArticleList();
    }

    private async Task CreateArticleAsync()
    {
        await DialogService.CreateArticleAsync(_vendor!.Id, true);

        FetchArticleList();
    }

    private async Task ModifyArticleAsync(Article article)
    {
        await DialogService.ModifyArticleAsync(article, true);

        FetchArticleList();
    }

    private async Task ImportArticleAsync()
    {
        await DialogService.ImportArticleAsync(_vendor!.Id);

        FetchArticleList();
    }

    private void FetchArticleList()
    {
        ArticleFacade.Fetch(_vendor?.Id, _number, _searchText);
    }

    private void SetPageCaption()
    {
        var caption = "Artikelliste";

        if (_vendor != null)
        {
            caption += $" ({_vendor.GetTotalName()})";
        }

        TitleFacade.SetCaption(caption);
    }

}
