@using DeVesen.Bazaar.Client.Models
@using DeVesen.Bazaar.Client.Components.Common.Buttons

<MudForm Model="Item"
         Style="margin-bottom: 20px;"
         Class="h-100">

    <div class="d-flex flex-column gap-4 h-100">
        
        @if (DisableStateChange is false)
        {
            <MudPaper Class="d-flex p-4 justify-space-between">
                @if (IsApprovedForSale)
                {
                    <MudText>@($"Freigegeben um {Item.ApprovedForSale:HH:mm} Uhr am {Item.ApprovedForSale:dd.MM.yyyy}")</MudText>
                    @if (IsApprovedForSaleResetPossible)
                    {
                        <MudIconButton Size="Size.Small"
                                       Icon="@Icons.Material.TwoTone.Delete"
                                       OnClick="ResetApprovedForSaleAsync"></MudIconButton>
                    }
                }
                else
                {
                    <MudButton FullWidth OnClick="ApproveForSaleAsync">Jetzt freigeben</MudButton>
                }
            </MudPaper>

            @if (IsSold)
            {
                <MudPaper Class="d-flex p-4 justify-space-between">
                    <MudText>@($"Verkauft für {Item.SoldAt:#.##} € um {Item.Sold:HH:mm} Uhr am {Item.Sold:dd.MM.yyyy}")</MudText>
                    @if (IsSoldResetPossible)
                    {
                        <MudIconButton Size="Size.Small"
                                       Icon="@Icons.Material.TwoTone.Delete"
                                       OnClick="ResetSoldAsync"></MudIconButton>
                    }
                </MudPaper>
            }

            @if (IsReturned)
            {
                <MudPaper Class="d-flex p-4 justify-space-between">
                    <MudText>@($"Zurückgegeben um {Item.Returned:dd.MM.yyyy}")</MudText>
                    @if (IsReturnedResetPossible)
                    {
                        <MudIconButton Size="Size.Small"
                                       Icon="@Icons.Material.TwoTone.Delete"
                                       OnClick="ResetReturnedAsync"></MudIconButton>
                    }
                </MudPaper>
            }

            @if (IsSettled)
            {
                <MudPaper Class="d-flex p-4 justify-space-between">
                    <MudText>@($"Abgerechnet um {Item.Settled:HH:mm} Uhr am {Item.Settled:dd.MM.yyyy}")</MudText>
                    <MudIconButton Size="Size.Small"
                                   Icon="@Icons.Material.TwoTone.Delete"
                                   OnClick="ResetSettledAsync"></MudIconButton>
                </MudPaper>
            }

            <MudDivider />
        }
        
        <DvButtonDelete OnClick="DeleteAsync" />

    </div>

</MudForm>

@code {
    [Parameter]
    public required Article Item { get; set; }

    [Parameter]
    public required EventCallback<Article> ItemChanged { get; set; }

    [Parameter]
    public bool IsTouched { get; set; }

    [Parameter]
    public EventCallback<bool> IsTouchedChanged { get; set; }

    [Parameter]
    public EventCallback OnDeleted { get; set; }

    [Parameter]
    public bool DisableStateChange { get; set; } = false;

    private bool IsApprovedForSale => Item.ApprovedForSale.HasValue;
    private bool IsSold => Item.Sold.HasValue;
    private bool IsReturned => Item.Returned.HasValue;
    private bool IsSettled => Item.Settled.HasValue;

    private bool IsApprovedForSaleResetPossible => IsSold is false && IsReturned is false && IsSettled is false;
    private bool IsSoldResetPossible => IsSettled is false;
    private bool IsReturnedResetPossible => IsSettled is false;

    private async Task ApproveForSaleAsync()
    {
        Item.ApprovedForSale = DateTime.Now;

        await SetTouchedAsync();
        await ItemChanged.InvokeAsync(Item);
    }

    private async Task ResetApprovedForSaleAsync()
    {
        Item.ApprovedForSale = null;

        await SetTouchedAsync();
        await ItemChanged.InvokeAsync(Item);
    }

    private async Task ResetSoldAsync()
    {
        Item.Sold = null;
        Item.SoldAt = null;

        await SetTouchedAsync();
        await ItemChanged.InvokeAsync(Item);
    }

    private async Task ResetReturnedAsync()
    {
        Item.Returned = null;

        await SetTouchedAsync();
        await ItemChanged.InvokeAsync(Item);
    }

    private async Task ResetSettledAsync()
    {
        Item.Settled = null;

        await SetTouchedAsync();
        await ItemChanged.InvokeAsync(Item);
    }

    private async Task SetTouchedAsync()
    {
        if (IsTouched)
        {
            return;
        }

        IsTouched = true;
        await IsTouchedChanged.InvokeAsync(IsTouched);
    }

    private async Task DeleteAsync()
    {
        await OnDeleted.InvokeAsync();
    }
}
