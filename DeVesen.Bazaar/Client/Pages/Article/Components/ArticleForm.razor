@using DeVesen.Bazaar.Client.Services
@using DeVesen.Bazaar.Client.Models

@inject ArticleService ArticleService

<MudTabs Rounded
         ApplyEffectsToContainer
         PanelClass="pt-3">
    <MudTabPanel Icon="@Icons.Material.Filled.Article" Text="Stammdaten">
        <ArticleMasterDataForm DisableNumber
                               @bind-IsValid="_isMasterDataValid"
                               @bind-IsValid:after="@OnStatusChanged"
                               @bind-IsTouched="@_isMasterDataTouched"
                               @bind-IsTouched:after="@OnStatusChanged"
                               @bind-ArticleItem="Item"
                               @bind-ArticleItem:after="@OnItemChanged" />
    </MudTabPanel>
    <MudTabPanel Icon="@Icons.Material.Filled.ShapeLine" Text="Zustände">
        <ArticleStatisticsForm @bind-Item="Item"
                               @bind-Item:after="@OnItemChanged"
                               @bind-IsTouched="@_isStatisticsTouched"
                               @bind-IsTouched:after="@OnStatusChanged"
                               OnDeleted="@OnDeleted"
                               DisableStateChange="@DisableStateChange" />
    </MudTabPanel>
    <MudTabPanel Icon="@Icons.Material.Filled.ShapeLine" Text="Label">
        <QrCode
            ElementId="id"
                Width="192"
                height="192"
                Text="@Item.Number.ToString()">
        </QrCode>
    </MudTabPanel>
</MudTabs>

@code {

    [Parameter]
    public required Article Item { get; set; }

    [Parameter]
    public EventCallback<Article> ItemChanged { get; set; }

    [Parameter]
    public bool IsValid { get; set; }

    [Parameter]
    public bool DisableAutoApprove { get; set; } = false;

    [Parameter]
    public bool DisableStateChange { get; set; } = false;

    [Parameter]
    public EventCallback<bool> IsValidChanged { get; set; }

    [Parameter]
    public EventCallback OnDeleted { get; set; }

    private bool _isMasterDataValid;
    private bool _isMasterDataTouched;
    private bool _isStatisticsTouched;

    private async Task OnStatusChanged()
    {
        var isMasterDataValid = _isMasterDataTouched is false || (_isMasterDataTouched && _isMasterDataValid);

        if (IsValid != isMasterDataValid)
        {
            IsValid = isMasterDataValid;
            await IsValidChanged.InvokeAsync(isMasterDataValid);
        }
    }

    private async Task OnItemChanged()
    {
        await ItemChanged.InvokeAsync(Item);
    }
}
