@using DeVesen.Bazaar.Client.Models
@using DeVesen.Bazaar.Client.Validator
@using DeVesen.Bazaar.Client.Components.Common.TextField
@using DeVesen.Bazaar.Client.Components.Manufacturer
@using DeVesen.Bazaar.Client.Components.ArticleCategory
@using DeVesen.Bazaar.Client.Services

@inject ArticleValidator ArticleValidator
@inject ArticleService ArticleService

<MudForm @ref="_form"
         Class="hear-comes-the-form"
         ValidationDelay="1000"
         IsValidChanged="OnIsValidChanged"
         FieldChanged="OnFormFieldChangedAsync"
         Model="ArticleItem"
         Validation="@(ArticleValidator.ValidateAsync)"
         Style="margin-bottom: 20px;">
    <MudGrid Spacing="2">
        <MudItem xs="12" sm="12">
            <MudGrid Spacing="0">
                <MudItem xs="12" sm="6">
                    @if (DisableNumber)
                    {
                        <MudField Label="Nummer">
                            @ArticleItem.Number
                        </MudField>
                    }
                    else
                    {
                        <DvTextField T="long"
                                     @ref="_numberInput"
                                     Required
                                     Label="Nummer"
                                     @bind-Value="ArticleItem.Number"
                                     For="@(() => ArticleItem.Number)"
                                     Adornment="Adornment.End"
                                     AdornmentIcon="@Icons.Material.TwoTone.Refresh"
                                     OnAdornmentClick="OnAdornmentClickAsync" />
                    }
                </MudItem>
            </MudGrid>
        </MudItem>

        <MudItem xs="12" sm="6">
            <ArticleCategorySelector Required
                                     For="@(() => ArticleItem.ArticleCategory)"
                                     @bind-Value="ArticleItem.ArticleCategory" />
        </MudItem>
        <MudItem xs="12" sm="6">
            <ManufacturerSelector Required
                                  For="@(() => ArticleItem.Manufacturer)"
                                  @bind-Value="ArticleItem.Manufacturer" />
        </MudItem>
        <MudItem xs="12" sm="12">
            <DvTextField T="string"
                         Required
                         Label="Beschreibung"
                         @bind-Value="ArticleItem.Description"
                         For="@(() => ArticleItem.Description)" />
        </MudItem>

        <MudItem xs="12" sm="6">
            <DvTextField T="double"
                         Required
                         Label="Preis"
                         @bind-Value="ArticleItem.Price01"
                         For="@(() => ArticleItem.Price01)" />
        </MudItem>
        <MudItem xs="12" sm="6">
            <DvTextField T="double?"
                         Label="Preis alternativ"
                         @bind-Value="ArticleItem.Price02"
                         For="@(() => ArticleItem.Price02)" />
        </MudItem>
    </MudGrid>
    
</MudForm>

@code {
    private MudForm _form = null!;
    private DvTextField<long>? _numberInput;

    [Parameter]
    public required bool DisableNumber { get; set; }

    [Parameter]
    public required Article ArticleItem { get; set; }

    [Parameter]
    public required EventCallback<Article> ArticleItemChanged { get; set; }

    [Parameter]
    public bool IsValid { get; set; }

    [Parameter]
    public EventCallback<bool> IsValidChanged { get; set; }

    [Parameter]
    public bool IsTouched { get; set; }

    [Parameter]
    public EventCallback<bool> IsTouchedChanged { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            SetInitialFocus();
        }
    }

    private async Task OnIsValidChanged(bool newValue)
    {
        await IsValidChanged.InvokeAsync(newValue);
    }

    private async Task OnFormFieldChangedAsync()
    {
        await ArticleItemChanged.InvokeAsync(ArticleItem);

        await _form.Validate();
    }

    private async Task OnAdornmentClickAsync()
    {
        var numberResponse = await ArticleService.GetNextNumber();

        ArticleItem.Number = numberResponse.Value;

        if (_numberInput != null)
        {
            await _numberInput.Validate();
        }
    }

    private void SetInitialFocus()
    {
        Task.Run(async () =>
        {
            if (_numberInput != null)
            {
                await Task.Delay(900);
                await _numberInput!.FocusAsync();
                await _numberInput!.SelectAsync();
            }
        });
    }
}
