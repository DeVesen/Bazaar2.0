@using DeVesen.Bazaar.Client.Extensions
@using DeVesen.Bazaar.Client.Models
@using DeVesen.Bazaar.Client.Pages.Article.Components
@using DeVesen.Bazaar.Client.Services
@using DeVesen.Bazaar.Client.State
@using DeVesen.Bazaar.Client.State.Article
@using DeVesen.Bazaar.Client.State.Title
@using Fluxor

@page "/articles"
@page "/vendors/{vendorId}/articles"

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@inject TitleFacade TitleFacade
@inject StateFacade StateFacade
@inject VendorService VendorService
@inject IState<ArticleState> ArticleState

@inject IDialogService DialogService;

@if (ArticleState.Value.IsLoaded is false)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <div class="d-flex flex-column gap-4 px-1">

        <ArticleOverviewToolbar @bind-Vendor="@_vendor"
                                @bind-Number="@_number"
                                @bind-SearchText="@_searchText"
                                @bind-Vendor:after="@OnArticleFilterChange"
                                @bind-Number:after="@OnArticleFilterChange"
                                @bind-SearchText:after="@OnArticleFilterChange"
                                DisableVendorSelection="@_pageSelect"
                                DisableCreateArticleBtn="@(_vendor == null)"
                                OnCreateArticleBtnClick="@CreateElementAsync"
                                OnImportArticleBtnClick="@ImportArticleAsync" />

        <MudTable T="Article"
                  FixedHeader
                  Hover
                  Items="@ArticleState.Value.Items"
                  SortLabel="Sort By"
                  OnRowClick="x => ModifyElementAsync(x.Item!)">
            <HeaderContent>
                <MudTh><MudTableSortLabel SortBy="new Func<Article, object>(x => x.Number)">Nummer</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Article, object>(x => x.Title)">Title</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Article, object>(x => x.Status)">Status</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Article, object>(x => x.ArticleCategory)">Kategorie</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Article, object>(x => x.Manufacturer)">Manufacturer</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Article, object>(x => x.Price01)">Preis</MudTableSortLabel></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Nummer">@context.Number</MudTd>
                <MudTd DataLabel="Titel">@context.Title</MudTd>
                <MudTd DataLabel="Status">@context.StatusText</MudTd>
                <MudTd DataLabel="ArticleCategory">@context.ArticleCategory</MudTd>
                <MudTd DataLabel="Manufacturer">@context.Manufacturer</MudTd>
                <MudTd DataLabel="Price01">@context.Price01</MudTd>
            </RowTemplate>
        </MudTable>
    </div>
}

@code {

    [Parameter]
    public string VendorId { get; set; } = string.Empty;

    private bool _pageSelect;
    private Vendor? _vendor;
    private string? _number;
    private string? _searchText;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var vendorResult = await VendorService.GetByIdAsync(VendorId);
        _vendor = vendorResult.IsValid ? vendorResult.Value.Item : null;

        FetchArticleList();

        SetPageCaption();
    }

    private void OnArticleFilterChange()
    {
        FetchArticleList();
    }

    private async Task CreateElementAsync()
    {
        var options = new DialogOptions
            {
                CloseOnEscapeKey = true,
                BackdropClick = false
            };

        var forceNext = false;

        do
        {
            var parameters = new DialogParameters<ArticleCreateDialog>
            {
                { x => x.ForceNext, forceNext },
                { x => x.VendorId, _vendor!.Id }
            };

            var dlg = await DialogService.ShowAsync<ArticleCreateDialog>("Artikel anlegen", parameters, options);
            var result = await dlg.Result;

            forceNext = result!.Canceled is false && (bool)result.Data!;

            FetchArticleList();

            StateHasChanged();
        } while (forceNext);
    }

    private async Task ModifyElementAsync(Article article)
    {
        var parameters = new DialogParameters<ArticleEditDialog>
        {
            { x => x.Item, article }
        };

        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            BackdropClick = false
        };

        var dlg = await DialogService.ShowAsync<ArticleEditDialog>("Artikel ändern", parameters, options);
        var result = await dlg.Result;

        if (result!.Canceled is false)
        {
            FetchArticleList();

            StateHasChanged();
        }
    }

    private async Task ImportArticleAsync()
    {
        var parameters = new DialogParameters<ArticleImportDialog> { { x => x.VendorId, _vendor!.Id } };

        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            BackdropClick = false
        };

        await DialogService.ShowAsync<ArticleImportDialog>("Artikel importieren", parameters, options)
                           .WaitForResult();

        FetchArticleList();
    }

    private void FetchArticleList()
    {
        StateFacade.Article.Fetch(VendorId, _number, _searchText);
    }

    private void SetPageCaption()
    {
        var caption = "Artikelliste";

        if (_vendor != null)
        {
            caption += $" ({_vendor.GetTotalName()})";
        }

        TitleFacade.SetCaption(caption);
    }
}
