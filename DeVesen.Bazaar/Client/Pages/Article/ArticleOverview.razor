@using System.Text
@using DeVesen.Bazaar.Client.Models
@using DeVesen.Bazaar.Client.Pages.Article.Components
@using DeVesen.Bazaar.Client.Services
@using DeVesen.Bazaar.Client.State.Article
@using DeVesen.Bazaar.Client.State.Title
@using DeVesen.Bazaar.Client.Components.HubHandler
@using DeVesen.Bazaar.Shared.Events
@using DeVesen.Bazaar.Client.Components.Common

@page "/articles"
@page "/vendors/{vendorId}/articles"
@attribute [Authorize]

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@inject TitleFacade TitleFacade
@inject ArticleFacade ArticleFacade
@inject ImportExportService ImportExportService
@inject VendorService VendorService
@inject NavigationService NavigationService
@inject IState<ArticleState> ArticleState

@inject Services.DialogService DialogService;

<style>
    @@media (max-width: 550px) {
        .action-short-button {
            width: 100px;
        }

        .action-short-button button {
            width: 100px;
        }
    }
</style>

<FileDownloadActions @ref="DownloadActions" />
<VendorHubActionHandler Removed="OnVendorRemoved" />
<ArticleHubActionHandler Added="OnArticleAdded" Updated="OnArticleUpdated" Removed="OnArticleRemoved" />

<div class="d-flex flex-column gap-4 px-1">

    <ArticleOverviewToolbar @bind-Vendor="@_vendor"
                            @bind-Number="@_number"
                            @bind-SearchText="@_searchText"
                            @bind-Vendor:after="@OnArticleFilterChange"
                            @bind-Number:after="@OnArticleFilterChange"
                            @bind-SearchText:after="@OnArticleFilterChange"
                            DisableVendorSelection="@(string.IsNullOrWhiteSpace(VendorId) is false)">
        <MudButtonGroup Color="Color.Surface"
                        Variant="Variant.Filled"
                        Size="Size.Large">
            <MudIconButton Icon="@Icons.Material.TwoTone.Add"
                           Disabled="@(_vendor == null)"
                           Color="Color.Tertiary"
                           Size="Size.Large"
                           Class="action-short-button"
                           OnClick="CreateArticleAsync"/>
            <MudIconButton Icon="@Icons.Material.TwoTone.Print"
                           Disabled="@(_vendor == null)"
                           Size="Size.Large"
                           Class="action-short-button"
                           OnClick="PrintOverviewAsync" />
            <MudMenu Icon="@Icons.Material.Filled.ArrowDropDown"
                     Disabled="@(_vendor == null)"
                     Size="Size.Large"
                     Class="h-100 action-short-button"
                     AnchorOrigin="Origin.BottomRight"
                     TransformOrigin="Origin.TopRight">
                <MudMenuItem Icon="@ImportIcon"
                             OnClick="ImportArticlesAsync">Import</MudMenuItem>
                <MudMenuItem Icon="@ExportIcon"
                             OnClick="ExportArticlesAsync">Export</MudMenuItem>
                <MudDivider />
                <MudMenuItem Icon="@ApproveIcon"
                             OnClick="ApproveArticleAsync">Freigeben</MudMenuItem>
            </MudMenu>
        </MudButtonGroup>
    </ArticleOverviewToolbar>
    
    @if (_vendorRemoved)
    {
        <MudAlert Variant="Variant.Filled"
                  Severity="Severity.Error"
                  ContentAlignment="HorizontalAlignment.Center">Händler wurde gelöscht, bitte Seite aktuallisieren.</MudAlert>
    }
    else
    {
        <MudTable T="Article"
                  FixedHeader
                  Hover
                  Loading="@(ArticleState.Value.IsLoaded is false)"
                  Items="@ArticleState.Value.Items"
                  SortLabel="Sort By"
                  OnRowClick="x => ModifyArticleAsync(x.Item!)">
            <HeaderContent>
                <MudTh><MudTableSortLabel SortBy="new Func<Article, object>(x => x.Number)">Nummer</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Article, object>(x => x.ArticleCategory)">Kategorie</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Article, object>(x => x.Manufacturer)">Hersteller</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Article, object>(x => x.Description)">Beschreibung</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Article, object>(x => x.Price01)">Preis</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Article, object>(x => x.Status)">Status</MudTableSortLabel></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Nummer">@context.Number</MudTd>
                <MudTd DataLabel="Kategorie">@context.ArticleCategory</MudTd>
                <MudTd DataLabel="Hersteller">@context.Manufacturer</MudTd>
                <MudTd DataLabel="Beschreibung">@context.Description</MudTd>
                <MudTd DataLabel="Preis">@context.Price01</MudTd>
                <MudTd DataLabel="Status">@context.StatusText</MudTd>
            </RowTemplate>
        </MudTable>
    }
</div>

@code {
    const string ImportIcon = @"<svg xmlns=""http://www.w3.org/2000/svg"" viewBox=""0 0 640 512""><path d=""M144 480C64.5 480 0 415.5 0 336c0-62.8 40.2-116.2 96.2-135.9c-.1-2.7-.2-5.4-.2-8.1c0-88.4 71.6-160 160-160c59.3 0 111 32.2 138.7 80.2C409.9 102 428.3 96 448 96c53 0 96 43 96 96c0 12.2-2.3 23.8-6.4 34.6C596 238.4 640 290.1 640 352c0 70.7-57.3 128-128 128l-368 0zm79-217c-9.4 9.4-9.4 24.6 0 33.9s24.6 9.4 33.9 0l39-39L296 392c0 13.3 10.7 24 24 24s24-10.7 24-24l0-134.1 39 39c9.4 9.4 24.6 9.4 33.9 0s9.4-24.6 0-33.9l-80-80c-9.4-9.4-24.6-9.4-33.9 0l-80 80z""/></svg>";
    const string ExportIcon = @"<svg xmlns=""http://www.w3.org/2000/svg"" viewBox=""0 0 640 512""><path d=""M144 480C64.5 480 0 415.5 0 336c0-62.8 40.2-116.2 96.2-135.9c-.1-2.7-.2-5.4-.2-8.1c0-88.4 71.6-160 160-160c59.3 0 111 32.2 138.7 80.2C409.9 102 428.3 96 448 96c53 0 96 43 96 96c0 12.2-2.3 23.8-6.4 34.6C596 238.4 640 290.1 640 352c0 70.7-57.3 128-128 128l-368 0zm79-167l80 80c9.4 9.4 24.6 9.4 33.9 0l80-80c9.4-9.4 9.4-24.6 0-33.9s-24.6-9.4-33.9 0l-39 39L344 184c0-13.3-10.7-24-24-24s-24 10.7-24 24l0 134.1-39-39c-9.4-9.4-24.6-9.4-33.9 0s-9.4 24.6 0 33.9z""/></svg>";
    const string ApproveIcon = @"<svg style=""width:24px;height:24px"" viewBox=""0 0 576 512""><path d=""M0 64C0 28.7 28.7 0 64 0L224 0l0 128c0 17.7 14.3 32 32 32l128 0 0 38.6C310.1 219.5 256 287.4 256 368c0 59.1 29.1 111.3 73.7 143.3c-3.2 .5-6.4 .7-9.7 .7L64 512c-35.3 0-64-28.7-64-64L0 64zm384 64l-128 0L256 0 384 128zM288 368a144 144 0 1 1 288 0 144 144 0 1 1 -288 0zm211.3-43.3c-6.2-6.2-16.4-6.2-22.6 0L416 385.4l-28.7-28.7c-6.2-6.2-16.4-6.2-22.6 0s-6.2 16.4 0 22.6l40 40c6.2 6.2 16.4 6.2 22.6 0l72-72c6.2-6.2 6.2-16.4 0-22.6z"" /></svg>";

    [Parameter]
    public string VendorId { get; set; } = string.Empty;

    private FileDownloadActions DownloadActions = null!;
    private Vendor? _vendor;
    private string? _number;
    private string? _searchText;
    private bool _vendorRemoved;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var vendorResult = await VendorService.GetByIdAsync(VendorId);
        _vendor = vendorResult.IsValid ? vendorResult.Value.Item : null;

        FetchArticleList();

        SetPageCaption();
    }

    private void OnArticleFilterChange()
    {
        FetchArticleList();
    }

    private async Task CreateArticleAsync()
    {
        await DialogService.CreateArticleAsync(_vendor!.Id);

        FetchArticleList();
    }

    private async Task ModifyArticleAsync(Article article)
    {
        await DialogService.ModifyArticleAsync(article);

        FetchArticleList();
    }

    private async Task ImportArticlesAsync()
    {
        await DialogService.ImportArticleAsync(_vendor!.Id);

        FetchArticleList();
    }

    private async Task ExportArticlesAsync()
    {
        var exportBuilder = new StringBuilder();

        exportBuilder.AppendLine(ImportExportService.ArticleToDataLineTitle());

        foreach (var article in ArticleState.Value.Items)
        {
            exportBuilder.AppendLine(ImportExportService.ArticleToDataLine(article));
        }

        await DownloadActions.TriggerDownload(exportBuilder.ToString(), $"Articles_{_vendor?.GetTotalName()}.txt");
    }

    private async Task ApproveArticleAsync()
    {
        await DialogService.ApproveArticleAsync(_vendor!.Id);

        FetchArticleList();
    }

    private async Task PrintOverviewAsync()
    {
        await NavigationService.ToVendorPrint(_vendor!.Id);
    }

    private void FetchArticleList()
    {
        ArticleFacade.Fetch(_vendor?.Id, _number, _searchText);
    }

    private void SetPageCaption()
    {
        var caption = "Artikelliste";

        if (_vendor != null)
        {
            caption += $" ({_vendor.GetTotalName()})";
        }

        TitleFacade.SetCaption(caption);
    }



    private void OnArticleAdded(ArticleAddedInfo args)
    {
        // if (_vendor == null)
        // {
        //     FetchArticleList();
        // }
    }

    private void OnArticleUpdated(ArticleUpdatedInfo args)
    {
        if (_vendor == null)
        {
            FetchArticleList();
        }
        if (_vendor?.Id == args.VendorId)
        {
            FetchArticleList();
        }
    }

    private void OnArticleRemoved(ArticleRemovedInfo args)
    {
        if (_vendor == null)
        {
            FetchArticleList();
        }
        if (_vendor?.Id == args.VendorId)
        {
            FetchArticleList();
        }
    }

    private void OnVendorRemoved(string vendorId)
    {
        if (_vendor == null)
        {
            FetchArticleList();
        }
        if (_vendor?.Id == vendorId)
        {
            _vendorRemoved = true;
        }
    }
}
