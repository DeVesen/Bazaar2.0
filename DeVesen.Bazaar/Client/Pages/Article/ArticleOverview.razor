@using DeVesen.Bazaar.Client.Models
@using DeVesen.Bazaar.Client.Pages.Article.Components
@using DeVesen.Bazaar.Client.Services
@using DeVesen.Bazaar.Client.State.Title
@using DeVesen.Bazaar.Client.Components.Common
@using DeVesen.Bazaar.Client.State.ArticleView

@page "/articles"
@page "/vendors/{vendorId}/articles"
@attribute [Authorize]

@inject TitleFacade TitleFacade
@inject ArticleViewFacade ArticleFacade
@inject ImportExportService ImportExportService
@inject VendorService VendorService
@inject NavigationService NavigationService

@inject Services.DialogService DialogService;

<style>
    @@media (max-width: 550px) {
        .action-short-button {
            width: 100px;
        }

        .action-short-button button {
            width: 100px;
        }
    }
</style>

<FileDownloadActions @ref="_downloadActions" />

<div class="d-flex flex-column gap-4 px-1">

    <ArticleOverviewToolbar @key="Field1" 
                            @bind-Vendor="@_vendor"
                            @bind-Number="@_number"
                            @bind-SearchText="@_searchText"
                            @bind-Vendor:after="@OnArticleFilterChange"
                            @bind-Number:after="@OnArticleFilterChange"
                            @bind-SearchText:after="@OnArticleFilterChange"
                            DisableVendorSelection="@(string.IsNullOrWhiteSpace(VendorId) is false)">
        <MudButtonGroup Color="Color.Surface"
                        Variant="Variant.Filled"
                        Size="Size.Large">
            <MudTooltip Text="Artikel erstellen" Disabled="@(_vendor == null)">
                <MudIconButton Icon="@Icons.Material.TwoTone.Add"
                               Disabled="@(_vendor == null)"
                               Color="Color.Tertiary"
                               Size="Size.Large"
                               Class="action-short-button h-100"
                               OnClick="CreateArticleAsync"/>
            </MudTooltip>
            <MudTooltip Text="Liste drucken" Disabled="@(_vendor == null)">
                <MudIconButton Icon="@Icons.Material.TwoTone.Print"
                               Disabled="@(_vendor == null)"
                               Size="Size.Large"
                               Class="action-short-button h-100"
                               OnClick="PrintOverviewAsync"/>
            </MudTooltip>
            <MudMenu Icon="@Icons.Material.Filled.ArrowDropDown"
                     Disabled="@(_vendor == null)"
                     Size="Size.Large"
                     Class="h-100 action-short-button"
                     AnchorOrigin="Origin.BottomRight"
                     TransformOrigin="Origin.TopRight">
                <MudMenuItem Icon="@BazaarIcons.Import"
                             OnClick="ImportArticlesAsync">Import</MudMenuItem>
                <MudMenuItem Icon="@BazaarIcons.Download"
                             OnClick="ExportArticlesAsync">Export</MudMenuItem>
                <MudDivider/>
                <MudMenuItem Icon="@BazaarIcons.Approve"
                             OnClick="ApproveArticleAsync">Freigeben</MudMenuItem>
            </MudMenu>
        </MudButtonGroup>
    </ArticleOverviewToolbar>
    
    <ArticleOverviewTable RowClicked="ModifyArticleAsync" />
</div>

@code {
    [Parameter]
    public string VendorId { get; set; } = string.Empty;

    public object? Field1 { get; set; } = new object();
    public object? Field2 { get; set; } = new object();

    private FileDownloadActions _downloadActions = null!;
    private Vendor? _vendor;
    private string? _number;
    private string? _searchText;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var vendorResult = await VendorService.GetByIdAsync(VendorId);
        _vendor = vendorResult.IsValid ? vendorResult.Value.Vendor : null;

        await ArticleFacade.StartCallbacks();

        SetPageCaption();

        ArticleFacade.Fetch(_vendor?.Id, _number, _searchText);
    }

    private void OnArticleFilterChange()
    {
        ArticleFacade.Fetch(_vendor?.Id, _number, _searchText);
    }

    private async Task CreateArticleAsync()
    {
        await DialogService.ArticleGroupedCreationDialog(_vendor!.Id);
    }

    private async Task ModifyArticleAsync(Article article)
    {
        await DialogService.ModifyArticleAsync(article);
    }

    private async Task ImportArticlesAsync()
    {
        await DialogService.ImportArticleAsync(_vendor!.Id);
    }

    private async Task ExportArticlesAsync()
    {
        // var exportBuilder = new StringBuilder();

        // exportBuilder.AppendLine(ImportExportService.ArticleToDataLineTitle());

        // foreach (var article in ArticleState.Value.Items)
        // {
        //     exportBuilder.AppendLine(ImportExportService.ArticleToDataLine(article));
        // }

        // await _downloadActions.TriggerDownload(exportBuilder.ToString(), $"Articles_{_vendor?.GetTotalName()}.csv");
    }

    private async Task ApproveArticleAsync()
    {
        await DialogService.ApproveArticleAsync(_vendor!.Id);
    }

    private async Task PrintOverviewAsync()
    {
        await NavigationService.ToVendorPrint(_vendor!.Id);
    }

    private void SetPageCaption()
    {
        var caption = "Artikelliste";

        if (_vendor != null)
        {
            caption += $" ({_vendor.GetTotalName()})";
        }

        TitleFacade.SetCaption(caption);
    }
}
