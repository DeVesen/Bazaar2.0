@using DeVesen.Bazaar.Client.Models
@using DeVesen.Bazaar.Client.Pages.Article.Components
@using DeVesen.Bazaar.Client.State.Title
@using DeVesen.Bazaar.Client.Services
@using DeVesen.Bazaar.Client.State.Settlement
@using DeVesen.Bazaar.Shared.Extensions

@page "/GiveBack"
@attribute [Authorize]

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@inject TitleFacade TitleFacade
@inject SettlementFacade SettlementFacade
@inject NavigationService NavigationService
@inject IState<SettlementState> SettlementState

@inject Services.DialogService DialogService;

<style>
    @@media (max-width: 550px) {
        .action-short-button {
            width: 100px;
        }

        .action-short-button button {
            width: 100px;
        }
    }
</style>

<div class="d-flex flex-column gap-4 px-1">

    <ArticleOverviewToolbar DisableNewItem="true"
                            @bind-Vendor="@_vendor"
                            @bind-Number="@_number"
                            @bind-SearchText="@_searchText"
                            @bind-Vendor:after="@FetchVendorSettlement">
        <MudButtonGroup Color="Color.Surface"
                        Variant="Variant.Filled"
                        Size="Size.Large">
            <MudIconButton Icon="@Icons.Material.TwoTone.Print"
                           Disabled="@(HasVendorSelected is false)"
                           Size="Size.Large"
                           Class="action-short-button"
                           OnClick="OnPrintOverviewAsync" />
            <MudIconButton Icon="@GiveBackIconPath"
                           Disabled="@(HasVendorSelected is false)"
                           Size="Size.Large"
                           Class="action-short-button"
                           OnClick="OnGiveBackAsync" />
            <MudIconButton Icon="@PayOutIconPath"
                           Disabled="@(HasArticlesToGiveBack || HasArticlesToSettle is false)"
                           Size="Size.Large"
                           Class="action-short-button"
                           OnClick="OnPayOutAsync" />
        </MudButtonGroup>
    </ArticleOverviewToolbar>
    @if (SettlementState.Value.IsEmpty)
    {
        <MudText>Bitte einen Händler auswählen!</MudText>
    }
    else if (SettlementState.Value.IsFailed)
    {
        <MudText>Fehler beim laden des Händlers!</MudText>
    }
    else
    {
        @if (SettlementState.Value.IsLoaded)
        {
            @if (HasArticlesToSettle is false)
            {
                <MudAlert Dense
                          Square
                          Variant="Variant.Filled"
                          Severity="Severity.Error"
                          ContentAlignment="HorizontalAlignment.Center">
                    <MudText>Dieser Händler hat keine offenen Posten welche abgerechnet werden könnten.</MudText>
                </MudAlert>
            }
            else if (HasArticlesToGiveBack)
            {
                <MudAlert Dense
                          Square
                          Variant="Variant.Filled"
                          Severity="Severity.Warning"
                          ContentAlignment="HorizontalAlignment.Center">
                    <MudText>Es gibt noch Artikel im Verkauf!</MudText>
                </MudAlert>
            }
        }
        <MudTable T="Article"
                  FixedHeader
                  Hover
                  Loading="@SettlementState.Value.IsLoading"
                  Items="@GetFilteredArticles()"
                  SortLabel="Sort By">
            <HeaderContent>
                <MudTh><MudTableSortLabel SortBy="new Func<Article, object>(x => x.Number)">Nummer</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Article, object>(x => x.ArticleCategory)">Kategorie</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Article, object>(x => x.Manufacturer)">Hersteller</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Article, object>(x => x.Description)">Beschreibung</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Article, object>(x => x.Price01)">Preis</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Article, object>(x => x.Status)">Status</MudTableSortLabel></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Nummer">@context.Number</MudTd>
                <MudTd DataLabel="Kategorie">@context.ArticleCategory</MudTd>
                <MudTd DataLabel="Hersteller">@context.Manufacturer</MudTd>
                <MudTd DataLabel="Beschreibung">@context.Description</MudTd>
                <MudTd DataLabel="Preis">@context.Price01</MudTd>
                <MudTd DataLabel="Status">@context.StatusText</MudTd>
            </RowTemplate>
        </MudTable>
    }
</div>

@code {
    const string GiveBackIconPath = @"<svg style=""width:24px;height:24px"" viewBox=""0 0 576 512""><path d=""M0 64C0 28.7 28.7 0 64 0L224 0l0 128c0 17.7 14.3 32 32 32l128 0 0 128-168 0c-13.3 0-24 10.7-24 24s10.7 24 24 24l168 0 0 112c0 35.3-28.7 64-64 64L64 512c-35.3 0-64-28.7-64-64L0 64zM384 336l0-48 110.1 0-39-39c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l80 80c9.4 9.4 9.4 24.6 0 33.9l-80 80c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l39-39L384 336zm0-208l-128 0L256 0 384 128z"" /></svg>";
    const string PayOutIconPath = @"<svg style=""width:24px;height:24px"" viewBox=""0 0 576 512""><path d=""M312 24l0 10.5c6.4 1.2 12.6 2.7 18.2 4.2c12.8 3.4 20.4 16.6 17 29.4s-16.6 20.4-29.4 17c-10.9-2.9-21.1-4.9-30.2-5c-7.3-.1-14.7 1.7-19.4 4.4c-2.1 1.3-3.1 2.4-3.5 3c-.3 .5-.7 1.2-.7 2.8c0 .3 0 .5 0 .6c.2 .2 .9 1.2 3.3 2.6c5.8 3.5 14.4 6.2 27.4 10.1l.9 .3s0 0 0 0c11.1 3.3 25.9 7.8 37.9 15.3c13.7 8.6 26.1 22.9 26.4 44.9c.3 22.5-11.4 38.9-26.7 48.5c-6.7 4.1-13.9 7-21.3 8.8l0 10.6c0 13.3-10.7 24-24 24s-24-10.7-24-24l0-11.4c-9.5-2.3-18.2-5.3-25.6-7.8c-2.1-.7-4.1-1.4-6-2c-12.6-4.2-19.4-17.8-15.2-30.4s17.8-19.4 30.4-15.2c2.6 .9 5 1.7 7.3 2.5c13.6 4.6 23.4 7.9 33.9 8.3c8 .3 15.1-1.6 19.2-4.1c1.9-1.2 2.8-2.2 3.2-2.9c.4-.6 .9-1.8 .8-4.1l0-.2c0-1 0-2.1-4-4.6c-5.7-3.6-14.3-6.4-27.1-10.3l-1.9-.6c-10.8-3.2-25-7.5-36.4-14.4c-13.5-8.1-26.5-22-26.6-44.1c-.1-22.9 12.9-38.6 27.7-47.4c6.4-3.8 13.3-6.4 20.2-8.2L264 24c0-13.3 10.7-24 24-24s24 10.7 24 24zM568.2 336.3c13.1 17.8 9.3 42.8-8.5 55.9L433.1 485.5c-23.4 17.2-51.6 26.5-80.7 26.5L192 512 32 512c-17.7 0-32-14.3-32-32l0-64c0-17.7 14.3-32 32-32l36.8 0 44.9-36c22.7-18.2 50.9-28 80-28l78.3 0 16 0 64 0c17.7 0 32 14.3 32 32s-14.3 32-32 32l-64 0-16 0c-8.8 0-16 7.2-16 16s7.2 16 16 16l120.6 0 119.7-88.2c17.8-13.1 42.8-9.3 55.9 8.5zM193.6 384c0 0 0 0 0 0l-.9 0c.3 0 .6 0 .9 0z"" /></svg>";

    private bool HasVendorSelected => _vendor != null;

    private bool HasArticlesToGiveBack
    {
        get
        {
            var result = SettlementState.Value.IsLoaded &&
                         SettlementState.Value.Articles.Any() &&
                         SettlementState.Value.Articles.Any(p => p.IsReturned() is false && p.IsSold() is false && p.IsSettled() is false);

            return result;
        }
    }

    private bool HasArticlesToSettle
    {
        get
        {
            var result = SettlementState.Value.IsLoaded &&
                         SettlementState.Value.Articles.Any() &&
                         SettlementState.Value.Articles.All(p => p.IsSettled() is false);
            return result;
        }
    }

    private Vendor? _vendor;
    private string? _number;
    private string? _searchText;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        SettlementFacade.ResetSelection();

        TitleFacade.SetCaption("Rückgabe / Abrechnung");
    }

    private void FetchVendorSettlement()
    {
        if (_vendor == null)
        {
            SettlementFacade.ResetSelection();
        }
        else
        {
            SettlementFacade.Fetch(_vendor.Id);
        }
    }

    private IEnumerable<Article> GetFilteredArticles()
    {
        var result = SettlementState.Value.Articles.AsEnumerable();

        if (string.IsNullOrEmpty(_number) is false)
        {
            result = result.Where(p => _number.BiContainsIgnoreCase(p.Number));
        }
        if (string.IsNullOrWhiteSpace(_searchText) is false)
        {
            result = result.Where(p => MatchArticle(p, _searchText));
        }

        result = result.OrderBy(p => p.Number);

        return result;
    }

    private static bool MatchArticle(Article article, string searchText)
    {
        return searchText.BiContainsIgnoreCase(article.Number) ||
               searchText.BiContainsIgnoreCase(article.ArticleCategory) ||
               searchText.BiContainsIgnoreCase(article.Manufacturer) ||
               searchText.BiContainsIgnoreCase(article.Description);
    }

    private async Task OnPrintOverviewAsync()
    {
        await NavigationService.ToVendorPrintSettlement(_vendor!.Id);
    }

    private async Task OnGiveBackAsync()
    {
        await DialogService.GiveBackArticleAsync(_vendor!.Id).ConfigureAwait(false);

        FetchVendorSettlement();
    }

    private async Task OnPayOutAsync()
    {
        var openSales = SettlementState.Value.GetOpenSales();
        var shareOfSales = SettlementState.Value.GetShareOfSales();
        var articleCommission = SettlementState.Value.GetHandlingFee();

        var payedOut = await DialogService.PayOutVendorAsync(openSales, shareOfSales, articleCommission).ConfigureAwait(false);

        if (payedOut)
        {
            var articleIds = SettlementState.Value.Articles.Where(p => p.IsSettled() is false)
                                                           .Select(p => p.Id);

            SettlementFacade.PayOut(_vendor!.Id, articleIds);
            
            await NavigationService.ToVendorPrintSettlement(_vendor!.Id);
        }
        else
        {
            SettlementFacade.Fetch(_vendor!.Id);
        }
    }

}
