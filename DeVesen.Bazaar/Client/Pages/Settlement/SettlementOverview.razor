@using DeVesen.Bazaar.Client.Models
@using DeVesen.Bazaar.Client.Pages.Article.Components
@using DeVesen.Bazaar.Client.State.Title
@using DeVesen.Bazaar.Client.Components.Common.Buttons
@using DeVesen.Bazaar.Client.Services
@using DeVesen.Bazaar.Client.State.Settlement
@using DeVesen.Bazaar.Shared.Extensions

@page "/GiveBack"
@attribute [Authorize]

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@inject TitleFacade TitleFacade
@inject SettlementFacade SettlementFacade
@inject NavigationService NavigationService
@inject IState<SettlementState> SettlementState

@inject Services.DialogService DialogService;

<div class="d-flex flex-column gap-4 px-1">

    <ArticleOverviewToolbar DisableNewItem="true"
                            @bind-Vendor="@_vendor"
                            @bind-Number="@_number"
                            @bind-SearchText="@_searchText"
                            @bind-Vendor:after="@FetchVendorSettlement">
        <MudGrid Spacing="1">
            <MudItem xs="6" sm="4" md="12">
                <DvButtonPrint Disabled="@(HasVendorSelected is false)"
                               OnClick="OnPrintOverviewAsync" />
            </MudItem>
            <MudItem xs="6" sm="4" md="12">
                <DvButtonGiveBack Disabled="@(HasArticlesToGiveBack is false)"
                                  OnClick="OnGiveBackAsync" />
            </MudItem>
            <MudItem xs="6" sm="4" md="12">
                <DvButtonPayOut Disabled="@(HasArticlesToGiveBack || HasArticlesToSettle is false)"
                                OnClick="OnPayOutAsync" />
            </MudItem>
        </MudGrid>
    </ArticleOverviewToolbar>
    @if (SettlementState.Value.IsEmpty)
    {
        <MudText>Bitte einen Händler auswählen!</MudText>
    }
    else if (SettlementState.Value.IsFailed)
    {
        <MudText>Fehler beim laden des Händlers!</MudText>
    }
    else
    {
        @if (SettlementState.Value.IsLoaded)
        {
            @if (HasArticlesToSettle is false)
            {
                <MudAlert Dense
                          Square
                          Variant="Variant.Filled"
                          Severity="Severity.Error"
                          ContentAlignment="HorizontalAlignment.Center">
                    <MudText>Dieser Händler hat keine offenen Posten welche abgerechnet werden könnten.</MudText>
                </MudAlert>
            }
            else if (HasArticlesToGiveBack)
            {
                <MudAlert Dense
                          Square
                          Variant="Variant.Filled"
                          Severity="Severity.Warning"
                          ContentAlignment="HorizontalAlignment.Center">
                    <MudText>Es gibt noch Artikel im Verkauf!</MudText>
                </MudAlert>
            }
        }
        <MudTable T="Article"
                  FixedHeader
                  Hover
                  Loading="@SettlementState.Value.IsLoading"
                  Items="@GetFilteredArticles()"
                  SortLabel="Sort By">
            <HeaderContent>
                <MudTh><MudTableSortLabel SortBy="new Func<Article, object>(x => x.Number)">Nummer</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Article, object>(x => x.ArticleCategory)">Kategorie</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Article, object>(x => x.Manufacturer)">Hersteller</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Article, object>(x => x.Description)">Beschreibung</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Article, object>(x => x.Price01)">Preis</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Article, object>(x => x.Status)">Status</MudTableSortLabel></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Nummer">@context.Number</MudTd>
                <MudTd DataLabel="Kategorie">@context.ArticleCategory</MudTd>
                <MudTd DataLabel="Hersteller">@context.Manufacturer</MudTd>
                <MudTd DataLabel="Beschreibung">@context.Description</MudTd>
                <MudTd DataLabel="Preis">@context.Price01</MudTd>
                <MudTd DataLabel="Status">@context.StatusText</MudTd>
            </RowTemplate>
        </MudTable>
    }
</div>

@code {
    private bool HasVendorSelected => _vendor != null;

    private bool HasArticlesToGiveBack
    {
        get
        {
            var result = SettlementState.Value.IsLoaded &&
                         SettlementState.Value.Articles.Any() &&
                         SettlementState.Value.Articles.Any(p => p.IsReturned() is false && p.IsSold() is false && p.IsSettled() is false);

            return result;
        }
    }

    private bool HasArticlesToSettle
    {
        get
        {
            var result = SettlementState.Value.IsLoaded &&
                         SettlementState.Value.Articles.Any() &&
                         SettlementState.Value.Articles.All(p => p.IsSettled() is false);
            return result;
        }
    }

    private Vendor? _vendor;
    private string? _number;
    private string? _searchText;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        SettlementFacade.ResetSelection();

        TitleFacade.SetCaption("Rückgabe / Abrechnung");
    }

    private void FetchVendorSettlement()
    {
        if (_vendor == null)
        {
            SettlementFacade.ResetSelection();
        }
        else
        {
            SettlementFacade.Fetch(_vendor.Id);
        }
    }

    private IEnumerable<Article> GetFilteredArticles()
    {
        var result = SettlementState.Value.Articles.AsEnumerable();

        if (string.IsNullOrEmpty(_number) is false)
        {
            result = result.Where(p => _number.BiContainsIgnoreCase(p.Number));
        }
        if (string.IsNullOrWhiteSpace(_searchText) is false)
        {
            result = result.Where(p => MatchArticle(p, _searchText));
        }

        return result;
    }

    private static bool MatchArticle(Article article, string searchText)
    {
        return searchText.BiContainsIgnoreCase(article.Number) ||
               searchText.BiContainsIgnoreCase(article.ArticleCategory) ||
               searchText.BiContainsIgnoreCase(article.Manufacturer) ||
               searchText.BiContainsIgnoreCase(article.Description);
    }

    private async Task OnPrintOverviewAsync()
    {
        await NavigationService.ToVendorPrintSettlement(_vendor!.Id);
    }

    private async Task OnGiveBackAsync()
    {
        await DialogService.GiveBackArticleAsync(_vendor!.Id).ConfigureAwait(false);

        FetchVendorSettlement();
    }

    private async Task OnPayOutAsync()
    {
        var openSales = SettlementState.Value.GetOpenSales();
        var shareOfSales = SettlementState.Value.GetShareOfSales();
        var articleCommission = SettlementState.Value.GetArticleCommission();

        var payedOut = await DialogService.PayOutVendorAsync(openSales, shareOfSales, articleCommission).ConfigureAwait(false);

        if (payedOut)
        {
            var articleIds = SettlementState.Value.Articles.Where(p => p.IsSettled() is false)
                                                           .Select(p => p.Id);

            SettlementFacade.PayOut(_vendor!.Id, articleIds);
            
            await NavigationService.ToVendorPrintSettlement(_vendor!.Id);
        }
        else
        {
            SettlementFacade.Fetch(_vendor!.Id);
        }
    }

}
