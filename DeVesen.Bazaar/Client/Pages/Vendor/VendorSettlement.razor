@using DeVesen.Bazaar.Client.Components.Common.Buttons
@using DeVesen.Bazaar.Client.Components.Settlement
@using DeVesen.Bazaar.Client.State.Settlement
@using DeVesen.Bazaar.Client.State.Title
@using DeVesen.Bazaar.Client.Models
@using Fluxor

@page "/vendors/{vendorId}/settlement"

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@inject TitleFacade TitleFacade
@inject SettlementFacade SettlementFacade
@inject IState<SettlementState> SettlementState

@if (SettlementState.Value.State == State.Settlement.SettlementState.LoadingState.Loaded)
{
    <div class="d-flex flex-wrap gap-2">
        
        <OverviewOfRefundsCard Articles="@Articles"
                               SalesShare="@VendorItem.SalesShare"
                               OfferUnitPrice="@VendorItem.OfferUnitPrice" />

        <ArtikeListCard Avatar="Va"
                        Title="Artikel im Verkauf"
                        Articles="@OpenArticles">
            <CardActions>
                <DvButtonPrint FullWidth
                               OuterClass="w-50" />
                <DvButtonGiveBack FullWidth
                                  OuterClass="w-50" />
            </CardActions>
        </ArtikeListCard>

        <ArtikeListCard Avatar="Ia"
                        Title="Artikel Importieren"
                        Articles="@FreeArticles">
            <CardActions>
                <DvButtonImport FullWidth
                                OuterClass="w-50" />
                <DvButtonApprove FullWidth
                                 OuterClass="w-50"/>
            </CardActions>
        </ArtikeListCard>

    </div>

}
else if (SettlementState.Value.State == State.Settlement.SettlementState.LoadingState.Failed)
{
    <MudText>Fehler beim Laden ...</MudText>
}
else
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}

@code {

    private Vendor VendorItem => SettlementState.Value.Vendor!.Item;
    private IEnumerable<Article> Articles => SettlementState.Value.Articles.OrderBy(p => (int)p.Status);
    private IEnumerable<Article> OpenArticles => Articles.Where(p => p.IsValidForSale()).OrderBy(p => p.Number);
    private IEnumerable<Article> FreeArticles => Articles.Where(p => p.IsApprovedForSale() is false).OrderBy(p => p.Number);

    [Parameter]
    public string VendorId { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        SettlementFacade.Fetch(VendorId);

        SetPageCaption();
    }

    private void SetPageCaption()
    {
        var caption = "Rückgabe / Abrechnung";

        TitleFacade.SetCaption(caption);
    }
}
