@using DeVesen.Bazaar.Client.Components.Common.ToolBar
@using DeVesen.Bazaar.Client.Components.Common.TextField
@using DeVesen.Bazaar.Client.Models
@using DeVesen.Bazaar.Client.Pages.Vendor.Components
@using DeVesen.Bazaar.Client.State.Title
@using DeVesen.Bazaar.Client.State.VendorView
@using DeVesen.Bazaar.Client.Components.HubHandler

@page "/vendors"
@attribute [Authorize]

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@inject Services.DialogService DialogService

@inject TitleFacade TitleFacade
@inject VendorViewFacade VendorFacade
@inject IState<VendorViewState> VendorState

<VendorHubActionHandler Added="FetchVendorList" Updated="FetchVendorList" Removed="FetchVendorList" />
<ArticleHubActionHandler Added="FetchVendorList" Updated="FetchVendorList" Removed="FetchVendorList" />

<div class="d-flex flex-column gap-4 px-1">
    <MudToolBar WrapContent Dense Gutters="false">
        <MudSpacer />
        <ToolBarIconButton Icon="@Icons.Material.TwoTone.PersonAddAlt"
                           OnClick="CreateElementAsync" />
        <DvTextField T="string"
                     OuterStyle="max-width: 200px"
                     OuterClass="pl-2"
                     Value="@_searchText"
                     ValueChanged="@OnSearchChanged" />
    </MudToolBar>

    <MudGrid Spacing="3">
        @if (VendorState.Value.IsLoaded)
        {
            @foreach (var element in @VendorState.Value.Vendors)
            {
                <MudItem xs="12" md="4" lg="3">
                    <VendorCard VendorItem="@element"
                                OnEdit="x => ModifyVendorAsync(x.Vendor)" />
                </MudItem>
            }
        }
    </MudGrid>
</div>


@code {

    private string _searchText = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        FetchVendorList();

        TitleFacade.SetCaption("Verkäufer");
    }

    private async Task CreateElementAsync()
    {
        await DialogService.CreateVendorAsync();

        FetchVendorList();
    }

    private async Task ModifyVendorAsync(Vendor vendor)
    {
        await DialogService.ModifyVendorAsync(vendor);

        FetchVendorList();
    }

    private void OnSearchChanged(string newValue)
    {
        _searchText = newValue;
    }

    private void FetchVendorList()
    {
        VendorFacade.Fetch(searchText: _searchText);
    }
}
