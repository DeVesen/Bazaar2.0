@using DeVesen.Bazaar.Client.Components.Common.ToolBar
@using DeVesen.Bazaar.Client.Components.Common.TextField
@using DeVesen.Bazaar.Client.Models
@using DeVesen.Bazaar.Client.Pages.Vendor.Components
@using DeVesen.Bazaar.Client.State.Title
@using DeVesen.Bazaar.Client.State.VendorView

@page "/vendors"
@attribute [Authorize]

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@inject Services.DialogService DialogService

@inject TitleFacade TitleFacade
@inject VendorViewFacade VendorViewFacade
@inject IState<VendorViewState> VendorState

<div class="d-flex flex-column gap-4 px-1">
    <MudToolBar WrapContent Dense Gutters="false">
        <MudSpacer />
        <ToolBarIconButton Icon="@Icons.Material.TwoTone.PersonAddAlt"
                           ToolTipText="Händler erstellen"
                           OnClick="CreateElementAsync" />
        <DvTextField T="string"
                     Label="Freitextsuche:"
                     OuterStyle="max-width: 200px"
                     OuterClass="pl-2"
                     @bind-Value="@_searchText"
                     Adornment="Adornment.End"
                     AdornmentIcon="@Icons.Material.TwoTone.Search"
                     OnAdornmentClick="@OnSearchChanged" />
    </MudToolBar>

    <MudGrid Spacing="3">
        @if (VendorState.Value.IsLoaded)
        {
            if (@VendorState.Value.Vendors.Any())
            {
                @foreach (var element in @VendorState.Value.Vendors)
                {
                    <MudItem xs="12" md="4" lg="3">
                        <VendorCard VendorItem="@element"
                                    OnEdit="x => ModifyVendorAsync(x.Vendor)" />
                    </MudItem>
                }
            }
            else
            {
                <MudText>Es wurde kein Verkäufereintrag gefunden.</MudText>
            }
        }
    </MudGrid>
</div>


@code {

    private string _searchText = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        TitleFacade.SetCaption("Verkäufer");

        await VendorViewFacade.StartCallbacks();
        VendorViewFacade.Fetch();
    }

    protected override async ValueTask DisposeAsyncCore(bool disposing)
    {
        await base.DisposeAsyncCore(disposing);

        await VendorViewFacade.StopCallbacks();

        VendorViewFacade.CleanUp();
    }

    private async Task CreateElementAsync()
    {
        await DialogService.CreateVendorAsync();
    }

    private async Task ModifyVendorAsync(Vendor vendor)
    {
        await DialogService.ModifyVendorAsync(vendor);
    }

    private void OnSearchChanged()
    {
        VendorViewFacade.Fetch(searchText: _searchText);
    }
}
