@using DeVesen.Bazaar.Client.Services
@using DeVesen.Bazaar.Client.Components.ToolBar
@using DeVesen.Bazaar.Client.Components.TextField
@using DeVesen.Bazaar.Client.Models
@using DeVesen.Bazaar.Client.Extensions
@using DeVesen.Bazaar.Client.Pages.Article.Components
@using DeVesen.Bazaar.Client.Pages.Vendor.Components
@using DeVesen.Bazaar.Client.State
@using DeVesen.Bazaar.Client.State.Title
@using DeVesen.Bazaar.Client.State.Vendor
@using Fluxor

@page "/vendors"

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@inject IDialogService DialogService
@inject NavigationService NavigationService

@inject TitleFacade TitleFacade
@inject StateFacade StateFacade
@inject IState<VendorState> VendorState

<div class="d-flex flex-column gap-4 px-1">
    <MudToolBar WrapContent Dense Gutters="false">
        <MudSpacer />
        <ToolBarIconButton Icon="@Icons.Material.TwoTone.PersonAddAlt"
                           OnClick="CreateElementAsync" />
        <DvTextField T="string"
                     OuterStyle="max-width: 200px"
                     OuterClass="pl-2"
                     Value="@_searchText"
                     ValueChanged="@OnSearchChanged" />
        <ToolBarGenederSelect Value="@_genderType"
                              ValueChanged="@OnGenderChanged" />
    </MudToolBar>

    <MudGrid Spacing="1">
        @if (VendorState.Value.IsLoaded)
        {
            @foreach (var element in @VendorState.Value.Vendors)
            {
                <MudItem xs="12" md="4" lg="3">
                    <VendorCard VendorItem="@element"
                                OnEdit="x => ModifyElementAsync(x.Item)"
                                OnArticle="OnArticleAsync"
                                OnImportArticles="OnImportArticlesAsync"
                                OnApproveArticles="OnApproveArticlesAsync"
                                OnSettlement="OnSettlementVendorAsync" />
                </MudItem>
            }
        }
    </MudGrid>
</div>


@code {
    
    private string _searchText = string.Empty;
    private ToolBarGenederSelect.GenderType _genderType = ToolBarGenederSelect.GenderType.All;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        TitleFacade.SetCaption("Verkäufer");
    }

    private async Task CreateElementAsync()
    {
        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            BackdropClick = false
        };

        var forceNext = false;

        do
        {
            var result = await DialogService.ShowAsync<VendorCreateDialog>("Verkäufer anlegen", options)
                                            .WaitForResult<VendorCreateDialog.OkResult>();

            if (result.Canceled is false)
            {
                forceNext = result.Data.ForceNext;
            }
            
            FetchVendorList();
        } while (forceNext);
    }

    private async Task ModifyElementAsync(Vendor vendor)
    {
        var parameters = new DialogParameters<VendorEditDialog> { { x => x.Item, vendor } };

        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            BackdropClick = false
        };

        await DialogService.ShowAsync<VendorEditDialog>("Verkäufer ändern", parameters, options)
                           .WaitForResult();

        FetchVendorList();
    }

    private async Task OnArticleAsync(VendorView args)
    {
        NavigationService.Vendor.ToArticle(args.Item.Id);
        await Task.CompletedTask;
    }

    private async Task OnImportArticlesAsync(VendorView args)
    {
        var parameters = new DialogParameters<ArticleImportDialog> { { x => x.VendorId, args.Item.Id } };

        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            BackdropClick = false
        };

        await DialogService.ShowAsync<ArticleImportDialog>("Artikel importieren", parameters, options)
                           .WaitForResult();
        
        FetchVendorList();
    }

    private async Task OnApproveArticlesAsync(VendorView args)
    {
        var parameters = new DialogParameters<ArticleApprovalDialog> { { x => x.VendorId, args.Item.Id } };

        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            BackdropClick = false
        };

        await DialogService.ShowAsync<ArticleApprovalDialog>("Artikel freigeben", parameters, options);

        FetchVendorList();
    }

    private async Task OnSettlementVendorAsync(VendorView args)
    {
    }

    private void OnSearchChanged(string newValue)
    {
        _searchText = newValue;

        FetchVendorList();
    }

    private void OnGenderChanged(ToolBarGenederSelect.GenderType newGenderType)
    {
        _genderType = newGenderType;

        FetchVendorList();
    }

    private void FetchVendorList()
    {
        var filter = new VendorFilter
        {
            Salutation = _genderType != ToolBarGenederSelect.GenderType.All
                ? _genderType.ToString()
                : null,
            SearchText = _searchText
        };

        StateFacade.Vendor.Fetch(filter);
    }
}
