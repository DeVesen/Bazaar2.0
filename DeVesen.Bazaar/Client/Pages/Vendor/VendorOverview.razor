@using DeVesen.Bazaar.Client.Services
@using DeVesen.Bazaar.Client.Components.Common.ToolBar
@using DeVesen.Bazaar.Client.Components.Common.TextField
@using DeVesen.Bazaar.Client.Components.Vendor
@using DeVesen.Bazaar.Client.Models
@using DeVesen.Bazaar.Client.Components.Article
@using DeVesen.Bazaar.Client.Extensions

@page "/vendors"

@inject NavigationService NavigationService
@inject VendorService VendorService
@inject IDialogService DialogService

<div class="d-flex flex-column gap-4 px-1">
    <MudToolBar WrapContent Dense Gutters="false">
        <MudSpacer />
        <ToolBarIconButton Icon="@Icons.Material.TwoTone.PersonAddAlt"
                           OnClick="CreateElementAsync" />
        <DvTextField T="string"
                     OuterStyle="max-width: 200px"
                     OuterClass="pl-2"
                     Value="@_searchText"
                     ValueChanged="OnSearchChangedAsync" />
        <ToolBarGenederSelect Value="@_genderType"
                              ValueChanged="OnGenderChangedAsync" />
    </MudToolBar>

    <MudGrid Spacing="1">
        @foreach (var element in @_elements)
        {
            <MudItem xs="12" md="4" lg="3">
                <VendorCard VendorItem="@element"
                            OnEdit="x => ModifyElementAsync(x.Item)"
                            OnArticle="OnArticleAsync"
                            OnImportArticle="OnImportArticleAsync" />
            </MudItem>
        }
    </MudGrid>
</div>


@code {
    
    private IEnumerable<VendorView> _elements = Enumerable.Empty<VendorView>();
    private string _searchText = string.Empty;
    private ToolBarGenederSelect.GenderType _genderType = ToolBarGenederSelect.GenderType.All;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await ReloadElementsAsync();
    }

    private async Task CreateElementAsync()
    {
        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            BackdropClick = false
        };

        var forceNext = false;

        do
        {
            var result = await DialogService.ShowAsync<VendorCreateDialog>("Verkäufer anlegen", options)
                                            .WaitForResult<VendorCreateDialog.OkResult>();

            if (result.Canceled is false)
            {
                forceNext = result.Data.ForceNext;
            }

            await ReloadElementsAsync();

            StateHasChanged();
        } while (forceNext);
    }

    private async Task ModifyElementAsync(Vendor vendor)
    {
        var parameters = new DialogParameters<VendorEditDialog> { { x => x.Item, vendor } };

        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            BackdropClick = false
        };

        await DialogService.ShowAsync<VendorEditDialog>("Verkäufer ändern", parameters, options)
                           .WaitForResult();
        
        await ReloadElementsAsync();
    }

    private async Task OnArticleAsync(VendorView args)
    {
        NavigationService.Vendor.ToArticle(args.Item.Id);
        await Task.CompletedTask;
    }

    private async Task OnImportArticleAsync(VendorView args)
    {
        var parameters = new DialogParameters<ArticleImportDialog> { { x => x.VendorId, args.Item.Id } };

        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            BackdropClick = false
        };

        await DialogService.ShowAsync<ArticleImportDialog>("Artikel importieren", parameters, options)
                           .WaitForResult();
        
        await ReloadElementsAsync();
    }

    private async Task OnSearchChangedAsync(string newValue)
    {
        _searchText = newValue;

        await ReloadElementsAsync();
    }

    private async Task OnGenderChangedAsync(ToolBarGenederSelect.GenderType newGenderType)
    {
        _genderType = newGenderType;

        await ReloadElementsAsync();
    }

    private async Task ReloadElementsAsync()
    {
        _elements = await VendorService.GetAllAsync();

        _elements = _elements.Where(p => p.Contains(_searchText));

        _elements = _elements.OrderBy(p => p.Item.LastName)
                             .ThenBy(p => p.Item.FirstName)
                             .ThenBy(p => p.Item.Salutation);

        switch (_genderType)
        {
            case ToolBarGenederSelect.GenderType.Male:
                _elements = _elements.Where(p => p.Item.Salutation == "Male");
                break;
            case ToolBarGenederSelect.GenderType.Female:
                _elements = _elements.Where(p => p.Item.Salutation == "Female");
                break;
        }
    }
}
