@using System.Text
@using DeVesen.Bazaar.Client.Components.Common
@using DeVesen.Bazaar.Client.Components.Common.IconButton
@using DeVesen.Bazaar.Client.Components.Common.ListingElement
@using DeVesen.Bazaar.Client.Models
@using DeVesen.Bazaar.Client.Services

@inject NavigationService NavigationService
@inject Services.DialogService DialogService
@inject ArticleService ArticleService
@inject ImportExportService ImportExportService

<FileDownloadActions @ref="_downloadActions" />

<MudCard Elevation="2" Class="m-2 rounded" Style="background-color: #575766">
    <MudCardHeader>
        <CardHeaderAvatar>
            <MudAvatar Color="Color.Primary">
                <MudIcon Icon="@Icons.Material.TwoTone.Person2" />
            </MudAvatar>
        </CardHeaderAvatar>
        <CardHeaderContent>
            <MudText Typo="Typo.body1">@VendorItem.Vendor.GetTotalName()</MudText>
            <MudText Typo="Typo.body2">@VendorItem.Vendor.Id</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudTooltip Text="Händler editieren">
                <DvIconButtonEdit OnClick="DoEdit"/>
            </MudTooltip>
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent>
        <div class="d-flex flex-column gap-3">
            <div class="d-flex flex-wrap gap-1">
                <ListingElementText Style="width: 45%;" Icon="@Icons.Material.TwoTone.Article" Value="@($"{VendorItem.Counts.Count} St.")" />
                <ListingElementText Style="width: 45%;" Icon="@Icons.Material.TwoTone.Search" Value="@($"{VendorItem.Counts.Approved} St.")" />
                <ListingElementText Style="width: 45%;" Icon="@Icons.Material.TwoTone.Sell" Value="@($"{VendorItem.Counts.OnSale} St.")" />
                <ListingElementText Style="width: 45%;" Icon="@Icons.Material.TwoTone.ShoppingCart" Value="@($"{VendorItem.Counts.Sold} St.")" />
                <ListingElementText Style="width: 45%;" Icon="@Icons.Material.TwoTone.Backspace" Value="@($"{VendorItem.Counts.Returned} St.")" />
                <ListingElementText Style="width: 100%;" Icon="@Icons.Material.TwoTone.Handshake" Value="@($"{VendorItem.Counts.Settled} St.")" />
            </div>
            <div class="d-flex flex-wrap gap-1">
                <ListingElementText Style="width: 45%;" Icon="@Icons.Material.TwoTone.Article" Value="@($"{VendorItem.Values.ApprovedValue} €")" />
                <ListingElementText Style="width: 45%;" Icon="@Icons.Material.TwoTone.ShoppingCart" Value="@($"{VendorItem.Values.SoldValue} €")" />
            </div>
            <div class="d-flex flex-wrap gap-1">
                <ListingElementText Style="width: 45%;" Icon="@Icons.Material.TwoTone.Article" Value="@($"{VendorItem.Values.OfferValue} €")" />
                <ListingElementText Style="width: 45%;" Icon="@Icons.Material.TwoTone.Euro" Value="@($"{VendorItem.Values.ShareValue} €")" />
            </div>
            <ListingElementText Style="width: 100%;" Icon="@Icons.Material.TwoTone.LocationOn" Value="@VendorItem.Vendor.Address" />
            <ListingElementText Style="width: 100%;" Icon="@Icons.Material.TwoTone.Info" Value="@VendorItem.Vendor.Note" />
        </div>
    </MudCardContent>
    <MudCardActions Class="d-flex justify-space-between">
        <DvIconButtonArticles OnClick="GoToArticles" ToolTipText="Artikelliste"/>
        <DvIconButtonImport OnClick="OnArticleImport" ToolTipText="Artikelliste importieren"/>
        <DvIconButtonDownload OnClick="OnArticleDownload" ToolTipText="Artikelliste download"/>
        <DvIconButtonApprove OnClick="OnArticleApprove" ToolTipText="Artikel freigeben"/>
    </MudCardActions>
</MudCard>

@code {

    [Parameter]
    public required VendorOverviewItem VendorItem { get; set; }

    [Parameter]
    public EventCallback<VendorOverviewItem> OnEdit { get; set; }

    private FileDownloadActions _downloadActions = null!;

    private async Task DoEdit()
    {
        await OnEdit.InvokeAsync(VendorItem);
    }

    private void GoToArticles()
    {
        NavigationService.ToArticleOverview(VendorItem.Vendor.Id);
    }

    private async Task OnArticleImport()
    {
        await DialogService.ImportArticleAsync(VendorItem.Vendor.Id);
    }

    private async Task OnArticleDownload()
    {
        var articles = await ArticleService.GetAllAsync(VendorItem.Vendor.Id);
        
        var exportBuilder = new StringBuilder();

        exportBuilder.AppendLine(ImportExportService.ArticleToDataLineTitle());

        foreach (var article in articles.Value)
        {
            exportBuilder.AppendLine(ImportExportService.ArticleToDataLine(article));
        }

        await _downloadActions.TriggerDownload(exportBuilder.ToString(), $"Articles_{VendorItem.Vendor.GetTotalName()}.csv");
    }

    private async Task OnArticleApprove()
    {
        await DialogService.ApproveArticleAsync(VendorItem.Vendor.Id);
    }
}
